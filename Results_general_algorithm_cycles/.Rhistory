max_acc_max_ensemble = max_acc_max_ensemble + sum(max_acc_ensemble== max(datos_alpha_s_1[,'n_ensemble']))
max_signifi <- dif_no_sig_all[(dif_no_sig_all$valor_alpha == alpha_value) & (dif_no_sig_all$valor_split == split_value), 'max_num_models']
# Guardamos para ranking
df_ranking_CM[(df_ranking_CM$valor_alpha == alpha_value) & (df_ranking_CM$valor_split == split_value),'max_no_signif'] = max(datos_CM_case[datos_CM_case$n_ensemble <= max_signifi,'accuracy_mean_mean'])
df_ranking_CM[(df_ranking_CM$valor_alpha == alpha_value) & (df_ranking_CM$valor_split == split_value),'max_total']
df_ranking_CM[(df_ranking_CM$valor_alpha == alpha_value) & (df_ranking_CM$valor_split == split_value),'max_no_signif']
# Bucles para alpha y split
for (alpha_value in c(2, 4, 6, 8, 10)) {
for (split_value in c(1, 2, 4, 6, 8, 10, 12, 14)) {
# Filtrar los datos por alpha y split
datos_CM_case <- datos_CM %>% filter(weights == CM,
alpha == alpha_value, split == split_value)
datos_CM_case <- as.data.frame(datos_CM_case)
datos_CM_case$n_cycle <- as.numeric(as.character(datos_CM_case$n_cycle))
datos_CM_case$n_ensemble <- as.numeric(as.character(datos_CM_case$n_ensemble))
# Encontrar el máximo
idmax <- which.max(datos_CM_case$accuracy_mean_mean)
max_acc_ensemble <- datos_CM_case[idmax, 'n_ensemble']
# Guardamos para ranking
df_ranking_CM[(df_ranking_CM$valor_alpha == alpha_value) & (df_ranking_CM$valor_split == split_value),'max_total'] = max(datos_CM_case$accuracy_mean_mean)
# Cuántas veces el máximo accuracy se logra con el máximo número de modelos
max_acc_max_ensemble = max_acc_max_ensemble + sum(max_acc_ensemble== max(datos_alpha_s_1[,'n_ensemble']))
max_signifi <- dif_no_sig_all[(dif_no_sig_all$valor_alpha == alpha_value) & (dif_no_sig_all$valor_split == split_value), 'max_num_models']
# Guardamos para ranking
df_ranking_CM[(df_ranking_CM$valor_alpha == alpha_value) & (df_ranking_CM$valor_split == split_value),'max_no_signif'] = max(datos_CM_case[datos_CM_case$n_ensemble <= max_signifi,'accuracy_mean_mean'])
# Graficar
plot(datos_CM_case$n_ensemble, datos_CM_case$accuracy_mean_mean, type = 'l',
xlab = 'n ensembles', ylab = 'accuracy mean', main = paste('alpha =', alpha_value, 'split =', split_value))
# Añadir los puntos correspondientes
points(max_acc_ensemble, datos_CM_case$accuracy_mean_mean[datos_CM_case$n_ensemble == max_acc_ensemble], col = 'darkorange1', pch = 19)
points(max_signifi, datos_CM_case$accuracy_mean_mean[datos_CM_case$n_ensemble == max_signifi], col = 'blue', pch = 19)
}
}
df_ranking_CM
alpha_value
split_value
split_value = 2
datos_CM_case <- datos_CM %>% filter(weights == CM,
alpha == alpha_value, split == split_value)
datos_CM_case <- as.data.frame(datos_CM_case)
datos_CM_case$n_cycle <- as.numeric(as.character(datos_CM_case$n_cycle))
datos_CM_case$n_ensemble <- as.numeric(as.character(datos_CM_case$n_ensemble))
# Encontrar el máximo
idmax <- which.max(datos_CM_case$accuracy_mean_mean)
max_acc_ensemble <- datos_CM_case[idmax, 'n_ensemble']
max_acc_ensemble
max(datos_CM_case$accuracy_mean_mean)
df_ranking_CM[(df_ranking_CM$valor_alpha == alpha_value) & (df_ranking_CM$valor_split == split_value),'max_total']
# Guardamos para ranking
df_ranking_CM[(df_ranking_CM$valor_alpha == alpha_value) & (df_ranking_CM$valor_split == split_value),'max_total'] = max(datos_CM_case$accuracy_mean_mean)
df_ranking_CM[(df_ranking_CM$valor_alpha == alpha_value) & (df_ranking_CM$valor_split == split_value),'max_total']
dif_no_sig_all
max_acc_max_ensemble = max_acc_max_ensemble + sum(max_acc_ensemble== max(datos_alpha_s_1[,'n_ensemble']))
max_signifi <- dif_no_sig_all[(dif_no_sig_all$valor_alpha == alpha_value) & (dif_no_sig_all$valor_split == split_value), 'max_num_models']
# Guardamos para ranking
# Guardamos para ranking
df_ranking_CM[(df_ranking_CM$valor_alpha == alpha_value) & (df_ranking_CM$valor_split == split_value),'max_no_signif'] = max(datos_CM_case[datos_CM_case$n_ensemble <= max_signifi,'accuracy_mean_mean'])
df_ranking_CM[(df_ranking_CM$valor_alpha == alpha_value) & (df_ranking_CM$valor_split == split_value),'max_no_signif']
df_ranking_CM
# Bucles para alpha y split
for (alpha_value in c(2, 4, 6, 8, 10)) {
for (split_value in c(1, 2, 4, 6, 8, 10, 12, 14)) {
print(alpha_value)
# Filtrar los datos por alpha y split
datos_CM_case <- datos_CM %>% filter(weights == CM,
alpha == alpha_value, split == split_value)
datos_CM_case <- as.data.frame(datos_CM_case)
datos_CM_case$n_cycle <- as.numeric(as.character(datos_CM_case$n_cycle))
datos_CM_case$n_ensemble <- as.numeric(as.character(datos_CM_case$n_ensemble))
# Encontrar el máximo
idmax <- which.max(datos_CM_case$accuracy_mean_mean)
max_acc_ensemble <- datos_CM_case[idmax, 'n_ensemble']
# Guardamos para ranking
df_ranking_CM[(df_ranking_CM$valor_alpha == alpha_value) & (df_ranking_CM$valor_split == split_value),'max_total'] = max(datos_CM_case$accuracy_mean_mean)
# Cuántas veces el máximo accuracy se logra con el máximo número de modelos
max_acc_max_ensemble = max_acc_max_ensemble + sum(max_acc_ensemble== max(datos_alpha_s_1[,'n_ensemble']))
max_signifi <- dif_no_sig_all[(dif_no_sig_all$valor_alpha == alpha_value) & (dif_no_sig_all$valor_split == split_value), 'max_num_models']
# Guardamos para ranking
df_ranking_CM[(df_ranking_CM$valor_alpha == alpha_value) & (df_ranking_CM$valor_split == split_value),'max_no_signif'] = max(datos_CM_case[datos_CM_case$n_ensemble <= max_signifi,'accuracy_mean_mean'])
print(df_ranking_CM[(df_ranking_CM$valor_alpha == alpha_value) & (df_ranking_CM$valor_split == split_value),'max_no_signif'])
# Graficar
plot(datos_CM_case$n_ensemble, datos_CM_case$accuracy_mean_mean, type = 'l',
xlab = 'n ensembles', ylab = 'accuracy mean', main = paste('alpha =', alpha_value, 'split =', split_value))
# Añadir los puntos correspondientes
points(max_acc_ensemble, datos_CM_case$accuracy_mean_mean[datos_CM_case$n_ensemble == max_acc_ensemble], col = 'darkorange1', pch = 19)
points(max_signifi, datos_CM_case$accuracy_mean_mean[datos_CM_case$n_ensemble == max_signifi], col = 'blue', pch = 19)
}
}
# Bucles para alpha y split
for (alpha_value in c(2, 4, 6, 8, 10)) {
for (split_value in c(1, 2, 4, 6, 8, 10, 12, 14)) {
print(alpha_value)
# Filtrar los datos por alpha y split
datos_CM_case <- datos_CM %>% filter(weights == CM,
alpha == alpha_value, split == split_value)
datos_CM_case <- as.data.frame(datos_CM_case)
datos_CM_case$n_cycle <- as.numeric(as.character(datos_CM_case$n_cycle))
datos_CM_case$n_ensemble <- as.numeric(as.character(datos_CM_case$n_ensemble))
# Encontrar el máximo
idmax <- which.max(datos_CM_case$accuracy_mean_mean)
max_acc_ensemble <- datos_CM_case[idmax, 'n_ensemble']
# Guardamos para ranking
df_ranking_CM[(df_ranking_CM$valor_alpha == alpha_value) & (df_ranking_CM$valor_split == split_value),'max_total'] = max(datos_CM_case$accuracy_mean_mean)
# Cuántas veces el máximo accuracy se logra con el máximo número de modelos
max_acc_max_ensemble = max_acc_max_ensemble + sum(max_acc_ensemble== max(datos_alpha_s_1[,'n_ensemble']))
max_signifi <- dif_no_sig_all[(dif_no_sig_all$valor_alpha == alpha_value) & (dif_no_sig_all$valor_split == split_value), 'max_num_models']
# Guardamos para ranking
df_ranking_CM[(df_ranking_CM$valor_alpha == alpha_value) & (df_ranking_CM$valor_split == split_value),'max_no_signif'] = max(datos_CM_case[datos_CM_case$n_ensemble <= max_signifi,'accuracy_mean_mean'])
print(df_ranking_CM[(df_ranking_CM$valor_alpha == alpha_value) & (df_ranking_CM$valor_split == split_value),'max_no_signif'])
# Graficar
plot(datos_CM_case$n_ensemble, datos_CM_case$accuracy_mean_mean, type = 'l',
xlab = 'n ensembles', ylab = 'accuracy mean', main = paste('alpha =', alpha_value, 'split =', split_value))
# Añadir los puntos correspondientes
points(max_acc_ensemble, datos_CM_case$accuracy_mean_mean[datos_CM_case$n_ensemble == max_acc_ensemble], col = 'darkorange1', pch = 19)
points(max_signifi, datos_CM_case$accuracy_mean_mean[datos_CM_case$n_ensemble == max_signifi], col = 'blue', pch = 19)
}
}
df_ranking_CM
plot_2max_grid_with_ranking <- function(CM){
df_ranking_CM <- data.frame(df_filtered$valores_combo)
colnames(df_ranking_CM) <- 'valores_combo'
df_ranking_CM$valor_split <- df_filtered$valor_split
df_ranking_CM$valor_alpha <- df_filtered$valor_alpha
df_ranking_CM$max_total <- rep(NA,dim(df_ranking_CM)[1])
df_ranking_CM$max_no_signif <- rep(NA,dim(df_ranking_CM)[1])
# Configuración de la cuadrícula (5 filas y 8 columnas)
par(mfrow = c(5, 8), mar = c(2, 2, 2, 1))
max_acc_max_ensemble = 0
# Bucles para alpha y split
for (alpha_value in c(2, 4, 6, 8, 10)) {
for (split_value in c(1, 2, 4, 6, 8, 10, 12, 14)) {
print(alpha_value)
# Filtrar los datos por alpha y split    datos_CM_case <- datos_CM %>% filter(weights == CM,
alpha == alpha_value, split == split_value)
plot_2max_grid_with_ranking <- function(CM){
df_ranking_CM <- data.frame(df_filtered$valores_combo)
colnames(df_ranking_CM) <- 'valores_combo'
df_ranking_CM$valor_split <- df_filtered$valor_split
df_ranking_CM$valor_alpha <- df_filtered$valor_alpha
df_ranking_CM$max_total <- rep(NA,dim(df_ranking_CM)[1])
df_ranking_CM$max_no_signif <- rep(NA,dim(df_ranking_CM)[1])
# Configuración de la cuadrícula (5 filas y 8 columnas)
par(mfrow = c(5, 8), mar = c(2, 2, 2, 1))
max_acc_max_ensemble = 0
# Bucles para alpha y split
for (alpha_value in c(2, 4, 6, 8, 10)) {
for (split_value in c(1, 2, 4, 6, 8, 10, 12, 14)) {
# Filtrar los datos por alpha y split
datos_CM_case <- datos_CM %>% filter(weights == CM,
alpha == alpha_value, split == split_value)
datos_CM_case <- as.data.frame(datos_CM_case)
datos_CM_case$n_cycle <- as.numeric(as.character(datos_CM_case$n_cycle))
datos_CM_case$n_ensemble <- as.numeric(as.character(datos_CM_case$n_ensemble))
# Encontrar el máximo
idmax <- which.max(datos_CM_case$accuracy_mean_mean)
max_acc_ensemble <- datos_CM_case[idmax, 'n_ensemble']
# Guardamos para ranking
df_ranking[(df_ranking$valor_alpha == alpha_value) & (df_ranking$valor_split == split_value),'max_total'] = max(datos_CM_case$accuracy_mean_mean)
# Cuántas veces el máximo accuracy se logra con el máximo número de modelos
max_acc_max_ensemble = max_acc_max_ensemble + sum(max_acc_ensemble== max(datos_alpha_s_1[,'n_ensemble']))
max_signifi <- dif_no_sig_all[(dif_no_sig_all$valor_alpha == alpha_value) & (dif_no_sig_all$valor_split == split_value), 'max_num_models']
# Guardamos para ranking
df_ranking[(df_ranking$valor_alpha == alpha_value) & (df_ranking$valor_split == split_value),'max_no_signif'] = max(datos_CM_case[datos_CM_case$n_ensemble <= max_signifi,'accuracy_mean_mean'])
# Graficar
plot(datos_CM_case$n_ensemble, datos_CM_case$accuracy_mean_mean, type = 'l',
xlab = 'n ensembles', ylab = 'accuracy mean', main = paste('alpha =', alpha_value, 'split =', split_value))
# Añadir los puntos correspondientes
points(max_acc_ensemble, datos_CM_case$accuracy_mean_mean[datos_CM_case$n_ensemble == max_acc_ensemble], col = 'darkorange1', pch = 19)
points(max_signifi, datos_CM_case$accuracy_mean_mean[datos_CM_case$n_ensemble == max_signifi], col = 'blue', pch = 19)
}
}
# Restablecer los parámetros gráficos
par(mfrow = c(1, 1))
return(df_ranking_CM)
}
plot_2max_grid_with_ranking <- function(CM){
df_ranking_CM <- data.frame(df_filtered$valores_combo)
colnames(df_ranking_CM) <- 'valores_combo'
df_ranking_CM$valor_split <- df_filtered$valor_split
df_ranking_CM$valor_alpha <- df_filtered$valor_alpha
df_ranking_CM$max_total <- rep(NA,dim(df_ranking_CM)[1])
df_ranking_CM$max_no_signif <- rep(NA,dim(df_ranking_CM)[1])
# Configuración de la cuadrícula (5 filas y 8 columnas)
par(mfrow = c(5, 8), mar = c(2, 2, 2, 1))
max_acc_max_ensemble = 0
# Bucles para alpha y split
for (alpha_value in c(2, 4, 6, 8, 10)) {
for (split_value in c(1, 2, 4, 6, 8, 10, 12, 14)) {
# Filtrar los datos por alpha y split
datos_CM_case <- datos_CM %>% filter(weights == CM,
alpha == alpha_value, split == split_value)
datos_CM_case <- as.data.frame(datos_CM_case)
datos_CM_case$n_cycle <- as.numeric(as.character(datos_CM_case$n_cycle))
datos_CM_case$n_ensemble <- as.numeric(as.character(datos_CM_case$n_ensemble))
# Encontrar el máximo
idmax <- which.max(datos_CM_case$accuracy_mean_mean)
max_acc_ensemble <- datos_CM_case[idmax, 'n_ensemble']
# Guardamos para ranking
df_ranking_CM[(df_ranking_CM$valor_alpha == alpha_value) & (df_ranking_CM$valor_split == split_value),'max_total'] = max(datos_CM_case$accuracy_mean_mean)
# Cuántas veces el máximo accuracy se logra con el máximo número de modelos
max_acc_max_ensemble = max_acc_max_ensemble + sum(max_acc_ensemble== max(datos_alpha_s_1[,'n_ensemble']))
max_signifi <- dif_no_sig_all[(dif_no_sig_all$valor_alpha == alpha_value) & (dif_no_sig_all$valor_split == split_value), 'max_num_models']
# Guardamos para ranking
df_ranking_CM[(df_ranking_CM$valor_alpha == alpha_value) & (df_ranking_CM$valor_split == split_value),'max_no_signif'] = max(datos_CM_case[datos_CM_case$n_ensemble <= max_signifi,'accuracy_mean_mean'])
# Graficar
plot(datos_CM_case$n_ensemble, datos_CM_case$accuracy_mean_mean, type = 'l',
xlab = 'n ensembles', ylab = 'accuracy mean', main = paste('alpha =', alpha_value, 'split =', split_value))
# Añadir los puntos correspondientes
points(max_acc_ensemble, datos_CM_case$accuracy_mean_mean[datos_CM_case$n_ensemble == max_acc_ensemble], col = 'darkorange1', pch = 19)
points(max_signifi, datos_CM_case$accuracy_mean_mean[datos_CM_case$n_ensemble == max_signifi], col = 'blue', pch = 19)
}
}
# Restablecer los parámetros gráficos
par(mfrow = c(1, 1))
return(df_ranking_CM)
}
CM = 'CLD'
df_ranking_CM = plot_2max_grid_with_ranking(CM)
df_ranking_CM
df_ranking_CM$max_total_order = rank(-df_ranking_CM$max_total)
df_ranking_CM$max_no_signif_order = rank(-df_ranking_CM$max_no_signif)
cor.test(df_ranking_CM$max_total_order, df_ranking_CM$max_no_signif_order, method=c('spearman'))
cor.test(df_ranking_CM$max_total_order, df_ranking_CM$max_no_signif_order, method=c('pearson'))
knitr::kable(df_ranking_CM %>% arrange(max_total_order))
df_ranking_CM$max_total_order = rank(-df_ranking_CM$max_total)
df_ranking_CM$max_no_signif_order = rank(-df_ranking_CM$max_no_signif)
cor.test(df_ranking_CM$max_total_order, df_ranking_CM$max_no_signif_order, method=c('spearman'))
cor.test(df_ranking_CM$max_total_order, df_ranking_CM$max_no_signif_order, method=c('pearson'))
knitr::kable(df_ranking_CM %>% arrange(max_total_order))
table(datos_CM$weights)
plot_all_combinations <- function(CM,datos_CM_filtro){
datos_CM_filtro$n_ensemble <- as.numeric(as.character(datos_CM_filtro$n_ensemble))
datos_CM_filtro$accuracy_mean_dataset_mean <- as.numeric(as.character(datos_CM_filtro$accuracy_mean_dataset_mean))
p <- plot_ly()
for (alpha_value in c(2, 4, 6, 8, 10)) {
for (split_value in c(1, 2, 4, 6, 8, 10, 12, 14)) {
datos_CM_case <- datos_CM_filtro %>% filter(weights == CM,
alpha == alpha_value, split == split_value)
p <- p %>%
add_lines(x = datos_CM_case$n_ensemble,
y = datos_CM_case$accuracy_mean_mean,
name = paste("alpha =", alpha_value, "split =", split_value),
line = list(width = 2))
}
}
p <- p %>%
layout(title = 'All combinations of alpha and split',
xaxis = list(title = 'n ensembles'),
yaxis = list(title = 'accuracy mean'),
legend = list(title = list(text = 'Legend')))
p
}
plot_all_combinations(CM,datos_CM_filtro)
plot_all_combinations <- function(CM,datos_CM_filtro){
datos_CM_filtro$n_ensemble <- as.numeric(as.character(datos_CM_filtro$n_ensemble))
datos_CM_filtro$accuracy_mean_mean <- as.numeric(as.character(datos_CM_filtro$accuracy_mean_mean))
p <- plot_ly()
for (alpha_value in c(2, 4, 6, 8, 10)) {
for (split_value in c(1, 2, 4, 6, 8, 10, 12, 14)) {
datos_CM_case <- datos_CM_filtro %>% filter(weights == CM,
alpha == alpha_value, split == split_value)
p <- p %>%
add_lines(x = datos_CM_case$n_ensemble,
y = datos_CM_case$accuracy_mean_mean,
name = paste("alpha =", alpha_value, "split =", split_value),
line = list(width = 2))
}
}
p <- p %>%
layout(title = 'All combinations of alpha and split',
xaxis = list(title = 'n ensembles'),
yaxis = list(title = 'accuracy mean'),
legend = list(title = list(text = 'Legend')))
p
}
plot_all_combinations(CM,datos_CM_filtro)
plot_all_combinations <- function(CM,datos_CM_filtro){
datos_CM_filtro$n_ensemble <- as.numeric(as.character(datos_CM_filtro$n_ensemble))
datos_CM_filtro$accuracy_mean_mean <- as.numeric(as.character(datos_CM_filtro$accuracy_mean_mean))
p <- plot_ly()
for (alpha_value in c(2, 4, 6, 8, 10)) {
for (split_value in c(1, 2, 4, 6, 8, 10, 12, 14)) {
datos_CM_case <- datos_CM_filtro %>% filter(weights == CM,
alpha == alpha_value, split == split_value)
p <- p %>%
add_lines(x = datos_CM_case$n_ensemble,
y = datos_CM_case$accuracy_mean_mean,
name = paste("alpha =", alpha_value, "split =", split_value),
line = list(width = 2))
}
}
p <- p %>%
layout(title = paste('All combinations of alpha and split ',CM),
xaxis = list(title = 'n ensembles'),
yaxis = list(title = 'accuracy mean'),
legend = list(title = list(text = 'Legend')))
p
}
plot_all_combinations(CM,datos_CM_filtro)
plot_all_combinations <- function(CM,datos_CM_filtro){
datos_CM_filtro$n_ensemble <- as.numeric(as.character(datos_CM_filtro$n_ensemble))
datos_CM_filtro$accuracy_mean_mean <- as.numeric(as.character(datos_CM_filtro$accuracy_mean_mean))
p <- plot_ly()
for (alpha_value in c(2, 4, 6, 8, 10)) {
for (split_value in c(1, 2, 4, 6, 8, 10, 12, 14)) {
datos_CM_case <- datos_CM_filtro %>% filter(weights == CM,
alpha == alpha_value, split == split_value)
p <- p %>%
add_lines(x = datos_CM_case$n_ensemble,
y = datos_CM_case$accuracy_mean_mean,
name = paste("alpha =", alpha_value, "split =", split_value),
line = list(width = 2))
}
}
p <- p %>%
layout(title = paste(CM,': All combinations of alpha and split'),
xaxis = list(title = 'n ensembles'),
yaxis = list(title = 'accuracy mean'),
legend = list(title = list(text = 'Legend')))
p
}
plot_all_combinations(CM,datos_CM_filtro)
plot_2max_grid_with_ranking <- function(CM,df_filtered,dif_no_sig_all){
df_ranking_CM <- data.frame(df_filtered$valores_combo)
colnames(df_ranking_CM) <- 'valores_combo'
df_ranking_CM$valor_split <- df_filtered$valor_split
df_ranking_CM$valor_alpha <- df_filtered$valor_alpha
df_ranking_CM$max_total <- rep(NA,dim(df_ranking_CM)[1])
df_ranking_CM$max_no_signif <- rep(NA,dim(df_ranking_CM)[1])
# Configuración de la cuadrícula (5 filas y 8 columnas)
par(mfrow = c(5, 8), mar = c(2, 2, 2, 1))
max_acc_max_ensemble = 0
# Bucles para alpha y split
for (alpha_value in c(2, 4, 6, 8, 10)) {
for (split_value in c(1, 2, 4, 6, 8, 10, 12, 14)) {
# Filtrar los datos por alpha y split
datos_CM_case <- datos_CM %>% filter(weights == CM,
alpha == alpha_value, split == split_value)
datos_CM_case <- as.data.frame(datos_CM_case)
datos_CM_case$n_cycle <- as.numeric(as.character(datos_CM_case$n_cycle))
datos_CM_case$n_ensemble <- as.numeric(as.character(datos_CM_case$n_ensemble))
# Encontrar el máximo
idmax <- which.max(datos_CM_case$accuracy_mean_mean)
max_acc_ensemble <- datos_CM_case[idmax, 'n_ensemble']
# Guardamos para ranking
df_ranking_CM[(df_ranking_CM$valor_alpha == alpha_value) & (df_ranking_CM$valor_split == split_value),'max_total'] = max(datos_CM_case$accuracy_mean_mean)
# Cuántas veces el máximo accuracy se logra con el máximo número de modelos
max_acc_max_ensemble = max_acc_max_ensemble + sum(max_acc_ensemble== max(datos_alpha_s_1[,'n_ensemble']))
max_signifi <- dif_no_sig_all[(dif_no_sig_all$valor_alpha == alpha_value) & (dif_no_sig_all$valor_split == split_value), 'max_num_models']
# Guardamos para ranking
df_ranking_CM[(df_ranking_CM$valor_alpha == alpha_value) & (df_ranking_CM$valor_split == split_value),'max_no_signif'] = max(datos_CM_case[datos_CM_case$n_ensemble <= max_signifi,'accuracy_mean_mean'])
# Graficar
plot(datos_CM_case$n_ensemble, datos_CM_case$accuracy_mean_mean, type = 'l',
xlab = 'n ensembles', ylab = 'accuracy mean', main = paste('alpha =', alpha_value, 'split =', split_value))
# Añadir los puntos correspondientes
points(max_acc_ensemble, datos_CM_case$accuracy_mean_mean[datos_CM_case$n_ensemble == max_acc_ensemble], col = 'darkorange1', pch = 19)
points(max_signifi, datos_CM_case$accuracy_mean_mean[datos_CM_case$n_ensemble == max_signifi], col = 'blue', pch = 19)
}
}
# Restablecer los parámetros gráficos
par(mfrow = c(1, 1))
return(df_ranking_CM)
}
plot_2max_grid_with_ranking <- function(CM,df_filtered,dif_no_sig_all,datos_CM){
df_ranking_CM <- data.frame(df_filtered$valores_combo)
colnames(df_ranking_CM) <- 'valores_combo'
df_ranking_CM$valor_split <- df_filtered$valor_split
df_ranking_CM$valor_alpha <- df_filtered$valor_alpha
df_ranking_CM$max_total <- rep(NA,dim(df_ranking_CM)[1])
df_ranking_CM$max_no_signif <- rep(NA,dim(df_ranking_CM)[1])
# Configuración de la cuadrícula (5 filas y 8 columnas)
par(mfrow = c(5, 8), mar = c(2, 2, 2, 1))
max_acc_max_ensemble = 0
# Bucles para alpha y split
for (alpha_value in c(2, 4, 6, 8, 10)) {
for (split_value in c(1, 2, 4, 6, 8, 10, 12, 14)) {
# Filtrar los datos por alpha y split
datos_CM_case <- datos_CM %>% filter(weights == CM,
alpha == alpha_value, split == split_value)
datos_CM_case <- as.data.frame(datos_CM_case)
datos_CM_case$n_cycle <- as.numeric(as.character(datos_CM_case$n_cycle))
datos_CM_case$n_ensemble <- as.numeric(as.character(datos_CM_case$n_ensemble))
# Encontrar el máximo
idmax <- which.max(datos_CM_case$accuracy_mean_mean)
max_acc_ensemble <- datos_CM_case[idmax, 'n_ensemble']
# Guardamos para ranking
df_ranking_CM[(df_ranking_CM$valor_alpha == alpha_value) & (df_ranking_CM$valor_split == split_value),'max_total'] = max(datos_CM_case$accuracy_mean_mean)
# Cuántas veces el máximo accuracy se logra con el máximo número de modelos
max_acc_max_ensemble = max_acc_max_ensemble + sum(max_acc_ensemble== max(datos_alpha_s_1[,'n_ensemble']))
max_signifi <- dif_no_sig_all[(dif_no_sig_all$valor_alpha == alpha_value) & (dif_no_sig_all$valor_split == split_value), 'max_num_models']
# Guardamos para ranking
df_ranking_CM[(df_ranking_CM$valor_alpha == alpha_value) & (df_ranking_CM$valor_split == split_value),'max_no_signif'] = max(datos_CM_case[datos_CM_case$n_ensemble <= max_signifi,'accuracy_mean_mean'])
# Graficar
plot(datos_CM_case$n_ensemble, datos_CM_case$accuracy_mean_mean, type = 'l',
xlab = 'n ensembles', ylab = 'accuracy mean', main = paste('alpha =', alpha_value, 'split =', split_value))
# Añadir los puntos correspondientes
points(max_acc_ensemble, datos_CM_case$accuracy_mean_mean[datos_CM_case$n_ensemble == max_acc_ensemble], col = 'darkorange1', pch = 19)
points(max_signifi, datos_CM_case$accuracy_mean_mean[datos_CM_case$n_ensemble == max_signifi], col = 'blue', pch = 19)
}
}
# Restablecer los parámetros gráficos
par(mfrow = c(1, 1))
return(df_ranking_CM)
}
plot_all_combinations <- function(CM,datos_CM_filtro){
datos_CM_filtro$n_ensemble <- as.numeric(as.character(datos_CM_filtro$n_ensemble))
datos_CM_filtro$accuracy_mean_mean <- as.numeric(as.character(datos_CM_filtro$accuracy_mean_mean))
p <- plot_ly()
for (alpha_value in c(2, 4, 6, 8, 10)) {
for (split_value in c(1, 2, 4, 6, 8, 10, 12, 14)) {
datos_CM_case <- datos_CM_filtro %>% filter(weights == CM,
alpha == alpha_value, split == split_value)
p <- p %>%
add_lines(x = datos_CM_case$n_ensemble,
y = datos_CM_case$accuracy_mean_mean,
name = paste("alpha =", alpha_value, "split =", split_value),
line = list(width = 2),
hovertemplate = paste('<b>Alpha: </b>', datos_CM_case$alpha_value,
'<br> Split:', datos_CM_case$alpha_value,
'<br> N ensemble:', datos_CM_case$n_ensemble,
'<br>Accuracy:', round(datos_CM_case$accuracy_mean_mean,4),
'<extra></extra>'))
}
}
p <- p %>%
layout(title = paste(CM,': All combinations of alpha and split'),
xaxis = list(title = 'n ensembles'),
yaxis = list(title = 'accuracy mean'),
legend = list(title = list(text = 'Legend')))
p
}
plot_all_combinations(CM,datos_CM_filtro)
datos_CM_case
plot_all_combinations <- function(CM,datos_CM_filtro){
datos_CM_filtro$n_ensemble <- as.numeric(as.character(datos_CM_filtro$n_ensemble))
datos_CM_filtro$accuracy_mean_mean <- as.numeric(as.character(datos_CM_filtro$accuracy_mean_mean))
p <- plot_ly()
for (alpha_value in c(2, 4, 6, 8, 10)) {
for (split_value in c(1, 2, 4, 6, 8, 10, 12, 14)) {
datos_CM_case <- datos_CM_filtro %>% filter(weights == CM,
alpha == alpha_value, split == split_value)
p <- p %>%
add_lines(x = datos_CM_case$n_ensemble,
y = datos_CM_case$accuracy_mean_mean,
name = paste("alpha =", alpha_value, "split =", split_value),
line = list(width = 2),
hovertemplate = paste('Alpha: ', alpha_value,
' Split:', alpha_value,
'<br> N ensemble:', datos_CM_case$n_ensemble,
'<br>Accuracy:', round(datos_CM_case$accuracy_mean_mean,4),
'<extra></extra>'))
}
}
p <- p %>%
layout(title = paste(CM,': All combinations of alpha and split'),
xaxis = list(title = 'n ensembles'),
yaxis = list(title = 'accuracy mean'),
legend = list(title = list(text = 'Legend')))
p
}
plot_all_combinations(CM,datos_CM_filtro)
plot_all_combinations <- function(CM,datos_CM_filtro){
datos_CM_filtro$n_ensemble <- as.numeric(as.character(datos_CM_filtro$n_ensemble))
datos_CM_filtro$accuracy_mean_mean <- as.numeric(as.character(datos_CM_filtro$accuracy_mean_mean))
p <- plot_ly()
for (alpha_value in c(2, 4, 6, 8, 10)) {
for (split_value in c(1, 2, 4, 6, 8, 10, 12, 14)) {
datos_CM_case <- datos_CM_filtro %>% filter(weights == CM,
alpha == alpha_value, split == split_value)
p <- p %>%
add_lines(x = datos_CM_case$n_ensemble,
y = datos_CM_case$accuracy_mean_mean,
name = paste("alpha =", alpha_value, "split =", split_value),
line = list(width = 2),
hovertemplate = paste('Alpha: ', alpha_value,
' Split:', alpha_value,
'<br>N ensemble:', datos_CM_case$n_ensemble,
'<br>Accuracy:', round(datos_CM_case$accuracy_mean_mean,4),
'<extra></extra>'))
}
}
p <- p %>%
layout(title = paste(CM,': All combinations of alpha and split'),
xaxis = list(title = 'n ensembles'),
yaxis = list(title = 'accuracy mean'),
legend = list(title = list(text = 'Legend')))
p
}
datos_alpha_s$n_ensemble <- as.numeric(as.character(datos_alpha_s$n_ensemble))
datos_alpha_s$accuracy_mean_dataset_mean <- as.numeric(as.character(datos_alpha_s$accuracy_mean_dataset_mean))
p <- plot_ly()
for (alpha_value in c(2, 4, 6, 8, 10)) {
for (split_value in c(1, 2, 4, 6, 8, 10, 12, 14)) {
datos_alpha_s_1 <- datos_alpha_s %>% filter(alpha == alpha_value, split == split_value)
p <- p %>%
add_lines(x = datos_alpha_s_1$n_ensemble,
y = datos_alpha_s_1$accuracy_mean_dataset_mean,
name = paste("alpha =", alpha_value, "split =", split_value),
line = list(width = 2),
hovertemplate = paste('Alpha: ', alpha_value,
' Split:', alpha_value,
'<br>N ensemble:', datos_alpha_s_1$n_ensemble,
'<br>Accuracy:', round(datos_alpha_s_1$accuracy_mean_dataset_mean,4),
'<extra></extra>'))
}
}
p <- p %>%
layout(title = 'All combinations of alpha and split',
xaxis = list(title = 'n ensembles'),
yaxis = list(title = 'accuracy mean'),
legend = list(title = list(text = 'Legend')))
p
