datos_alpha_s_1 <- as.data.frame(datos_alpha_s_1)
datos_alpha_s_1$n_cycle <- as.numeric(as.character(datos_alpha_s_1$n_cycle))
datos_alpha_s_1$n_ensemble <- as.numeric(as.character(datos_alpha_s_1$n_ensemble))
# Encontrar el máximo
idmax <- which.max(datos_alpha_s_1$accuracy_mean_dataset_mean)
max_acc_ensemble <- datos_alpha_s_1[idmax, 'n_ensemble']
# Guardamos para ranking
df_ranking[(df_ranking$valor_alpha == alpha_value) & (df_ranking$valor_split == split_value),'max_total'] = max(datos_alpha_s_1$accuracy_mean_dataset_mean)
# Cuántas veces el máximo accuracy se logra con el máximo número de modelos
max_acc_max_ensemble = max_acc_max_ensemble + sum(max_acc_ensemble== max(datos_alpha_s_1[,'n_ensemble']))
max_signifi <- dif_no_sig_all[(dif_no_sig_all$valor_alpha == alpha_value) & (dif_no_sig_all$valor_split == split_value), 'max_num_models']
# Guardamos para ranking
df_ranking[(df_ranking$valor_alpha == alpha_value) & (df_ranking$valor_split == split_value),'max_no_signif'] = max(datos_alpha_s_1[datos_alpha_s_1$n_ensemble <= max_signifi,'accuracy_mean_dataset_mean'])
# Graficar
plot(datos_alpha_s_1$n_ensemble, datos_alpha_s_1$accuracy_mean_dataset_mean, type = 'l',
xlab = 'n ensembles', ylab = 'accuracy mean', main = paste('alpha =', alpha_value, 'split =', split_value))
# Añadir los puntos correspondientes
points(max_acc_ensemble, datos_alpha_s_1$accuracy_mean_dataset_mean[datos_alpha_s_1$n_ensemble == max_acc_ensemble], col = 'darkorange1', pch = 19)
points(max_signifi, datos_alpha_s_1$accuracy_mean_dataset_mean[datos_alpha_s_1$n_ensemble == max_signifi], col = 'blue', pch = 19)
}
}
# Restablecer los parámetros gráficos
par(mfrow = c(1, 1))
# Configuración de la cuadrícula (5 filas y 8 columnas)
par(mfrow = c(5, 8), mar = c(2, 2, 2, 1))
# Bucles para alpha y split
for (alpha_value in c(2, 4, 6, 8, 10)) {
for (split_value in c(1, 2, 4, 6, 8, 10, 12, 14)) {
# Filtrar los datos por alpha y split
datos_alpha_s_1 <- datos_alpha_s %>% filter(alpha == alpha_value, split == split_value)
datos_alpha_s_1 <- as.data.frame(datos_alpha_s_1)
datos_alpha_s_1$n_cycle <- as.numeric(as.character(datos_alpha_s_1$n_cycle))
datos_alpha_s_1$n_ensemble <- as.numeric(as.character(datos_alpha_s_1$n_ensemble))
# Encontrar el máximo
idmax <- which.max(datos_alpha_s_1$accuracy_mean_dataset_mean)
max_acc_ensemble <- datos_alpha_s_1[idmax, 'n_ensemble']
max_signifi <- dif_no_sig_all[(dif_no_sig_all$valor_alpha == alpha_value) & (dif_no_sig_all$valor_split == split_value), 'max_num_models']
# Graficar
plot(datos_alpha_s_1$n_ensemble, datos_alpha_s_1$accuracy_mean_dataset_mean, type = 'l',
xlab = 'n ensembles', ylab = 'accuracy mean', main = paste('alpha =', alpha_value, 'split =', split_value),ylim=c(0.810,0.8153))
# Añadir los puntos correspondientes
points(max_acc_ensemble, datos_alpha_s_1$accuracy_mean_dataset_mean[datos_alpha_s_1$n_ensemble == max_acc_ensemble], col = 'darkorange1', pch = 19)
points(max_signifi, datos_alpha_s_1$accuracy_mean_dataset_mean[datos_alpha_s_1$n_ensemble == max_signifi], col = 'blue', pch = 19)
}
}
# Restablecer los parámetros gráficos
par(mfrow = c(1, 1))
# Configuración de la cuadrícula (5 filas y 8 columnas)
par(mfrow = c(5, 8), mar = c(2, 2, 2, 1))
# Bucles para alpha y split
for (alpha_value in c(2, 4, 6, 8, 10)) {
for (split_value in c(1, 2, 4, 6, 8, 10, 12, 14)) {
# Filtrar los datos por alpha y split
datos_alpha_s_1 <- datos_alpha_s %>% filter(alpha == alpha_value, split == split_value)
datos_alpha_s_1 <- as.data.frame(datos_alpha_s_1)
datos_alpha_s_1$n_cycle <- as.numeric(as.character(datos_alpha_s_1$n_cycle))
datos_alpha_s_1$n_ensemble <- as.numeric(as.character(datos_alpha_s_1$n_ensemble))
# Encontrar el máximo
idmax <- which.max(datos_alpha_s_1$accuracy_mean_dataset_mean)
max_acc_ensemble <- datos_alpha_s_1[idmax, 'n_ensemble']
max_signifi <- dif_no_sig_all[(dif_no_sig_all$valor_alpha == alpha_value) & (dif_no_sig_all$valor_split == split_value), 'max_num_models']
# Graficar
plot(datos_alpha_s_1$n_ensemble, datos_alpha_s_1$accuracy_mean_dataset_mean, type = 'l',
xlab = 'n ensembles', ylab = 'accuracy mean', main = paste('alpha =', alpha_value, 'split =', split_value),ylim=c(0.810,0.8153))
# Añadir los puntos correspondientes
points(max_acc_ensemble, datos_alpha_s_1$accuracy_mean_dataset_mean[datos_alpha_s_1$n_ensemble == max_acc_ensemble], col = 'darkorange1', pch = 19)
points(max_signifi, datos_alpha_s_1$accuracy_mean_dataset_mean[datos_alpha_s_1$n_ensemble == max_signifi], col = 'blue', pch = 19)
}
}
# Restablecer los parámetros gráficos
par(mfrow = c(1, 1))
datos_alpha_s$n_ensemble <- as.numeric(as.character(datos_alpha_s$n_ensemble))
datos_alpha_s$accuracy_mean_dataset_mean <- as.numeric(as.character(datos_alpha_s$accuracy_mean_dataset_mean))
p <- plot_ly()
for (alpha_value in c(2, 4, 6, 8, 10)) {
for (split_value in c(1, 2, 4, 6, 8, 10, 12, 14)) {
datos_alpha_s_1 <- datos_alpha_s %>% filter(alpha == alpha_value, split == split_value)
p <- p %>%
add_lines(x = datos_alpha_s_1$n_ensemble,
y = datos_alpha_s_1$accuracy_mean_dataset_mean,
name = paste("alpha =", alpha_value, "split =", split_value),
line = list(width = 2),
hovertemplate = paste('Alpha: ', alpha_value,
' Split:', alpha_value,
'<br>N ensemble:', datos_alpha_s_1$n_ensemble,
'<br>Accuracy:', round(datos_alpha_s_1$accuracy_mean_dataset_mean,4),
'<extra></extra>'))
}
}
p <- p %>%
layout(title = 'All combinations of alpha and split',
xaxis = list(title = 'n ensembles'),
yaxis = list(title = 'accuracy mean'),
legend = list(title = list(text = 'Legend')))
p
# Configuración de la cuadrícula (5 filas y 8 columnas)
par(mfrow = c(5, 8), mar = c(2, 2, 2, 1))
# Bucles para alpha y split
for (alpha_value in c(2, 4, 6, 8, 10)) {
for (split_value in c(1, 2, 4, 6, 8, 10, 12, 14)) {
# Filtrar los datos por alpha y split
datos_alpha_s_1 <- datos_alpha_s %>% filter(alpha == alpha_value, split == split_value)
datos_alpha_s_1 <- as.data.frame(datos_alpha_s_1)
datos_alpha_s_1$n_cycle <- as.numeric(as.character(datos_alpha_s_1$n_cycle))
datos_alpha_s_1$n_ensemble <- as.numeric(as.character(datos_alpha_s_1$n_ensemble))
# Encontrar el máximo
idmax <- which.max(datos_alpha_s_1$accuracy_mean_dataset_mean)
max_acc_ensemble <- datos_alpha_s_1[idmax, 'n_ensemble']
max_signifi <- dif_no_sig_all[(dif_no_sig_all$valor_alpha == alpha_value) & (dif_no_sig_all$valor_split == split_value), 'max_num_models']
# Graficar
plot(datos_alpha_s_1$n_ensemble, datos_alpha_s_1$accuracy_mean_dataset_mean, type = 'l',
xlab = 'n ensembles', ylab = 'accuracy mean', main = paste('alpha =', alpha_value, 'split =', split_value),ylim=c(0.810,0.8153))
# Añadir los puntos correspondientes
points(max_acc_ensemble, datos_alpha_s_1$accuracy_mean_dataset_mean[datos_alpha_s_1$n_ensemble == max_acc_ensemble], col = 'darkorange1', pch = 19)
points(max_signifi, datos_alpha_s_1$accuracy_mean_dataset_mean[datos_alpha_s_1$n_ensemble == max_signifi], col = 'blue', pch = 19)
}
}
# Restablecer los parámetros gráficos
par(mfrow = c(1, 1))
datos_alpha_s$n_ensemble <- as.numeric(as.character(datos_alpha_s$n_ensemble))
datos_alpha_s$accuracy_mean_dataset_mean <- as.numeric(as.character(datos_alpha_s$accuracy_mean_dataset_mean))
p <- plot_ly()
for (alpha_value in c(2, 4, 6, 8, 10)) {
for (split_value in c(1, 2, 4, 6, 8, 10, 12, 14)) {
datos_alpha_s_1 <- datos_alpha_s %>% filter(alpha == alpha_value, split == split_value)
p <- p %>%
add_lines(x = datos_alpha_s_1$n_ensemble,
y = datos_alpha_s_1$accuracy_mean_dataset_mean,
name = paste("alpha =", alpha_value, "split =", split_value),
line = list(width = 2),
hovertemplate = paste('Alpha: ', alpha_value,
' Split:', alpha_value,
'<br>N ensemble:', datos_alpha_s_1$n_ensemble,
'<br>Accuracy:', round(datos_alpha_s_1$accuracy_mean_dataset_mean,4),
'<extra></extra>'))
}
}
p <- p %>%
layout(title = 'All combinations of alpha and split',
xaxis = list(title = 'n ensembles'),
yaxis = list(title = 'accuracy mean'),
legend = list(title = list(text = 'Legend')))
p
datos_alpha_s$n_ensemble <- as.numeric(as.character(datos_alpha_s$n_ensemble))
datos_alpha_s$accuracy_mean_dataset_mean <- as.numeric(as.character(datos_alpha_s$accuracy_mean_dataset_mean))
p <- plot_ly()
for (alpha_value in c(2, 4, 6, 8, 10)) {
for (split_value in c(1, 2, 4, 6, 8, 10, 12, 14)) {
datos_alpha_s_1 <- datos_alpha_s %>% filter(alpha == alpha_value, split == split_value)
p <- p %>%
add_lines(x = datos_alpha_s_1$n_ensemble,
y = datos_alpha_s_1$accuracy_mean_dataset_mean,
name = paste("alpha =", alpha_value, "split =", split_value),
line = list(width = 2),
hovertemplate = paste('Alpha: ', alpha_value,
' Split:', alpha_value,
'<br>N ensemble:', datos_alpha_s_1$n_ensemble,
'<br>Accuracy:', round(datos_alpha_s_1$accuracy_mean_dataset_mean,4),
'<extra></extra>'))
}
}
p <- p %>%
layout(title = 'All combinations of alpha and split',
xaxis = list(title = 'n ensembles'),
yaxis = list(title = 'accuracy mean'),
legend = list(title = list(text = 'Legend')))
p
# Configuración de la cuadrícula (5 filas y 8 columnas)
par(mfrow = c(5, 8), mar = c(2, 2, 2, 1))
# Bucles para alpha y split
for (alpha_value in c(2, 4, 6, 8, 10)) {
for (split_value in c(1, 2, 4, 6, 8, 10, 12, 14)) {
# Filtrar los datos por alpha y split
datos_alpha_s_1 <- datos_alpha_s %>% filter(alpha == alpha_value, split == split_value)
datos_alpha_s_1 <- as.data.frame(datos_alpha_s_1)
datos_alpha_s_1$n_cycle <- as.numeric(as.character(datos_alpha_s_1$n_cycle))
datos_alpha_s_1$n_ensemble <- as.numeric(as.character(datos_alpha_s_1$n_ensemble))
# Encontrar el máximo
idmax <- which.max(datos_alpha_s_1$accuracy_mean_dataset_mean)
max_acc_ensemble <- datos_alpha_s_1[idmax, 'n_ensemble']
max_signifi <- dif_no_sig_all[(dif_no_sig_all$valor_alpha == alpha_value) & (dif_no_sig_all$valor_split == split_value), 'max_num_models']
# Graficar
plot(datos_alpha_s_1$n_ensemble, datos_alpha_s_1$accuracy_mean_dataset_mean, type = 'l',
xlab = 'n ensembles', ylab = 'accuracy mean', main = paste('alpha =', alpha_value, 'split =', split_value),ylim=c(0.810,0.8153))
# Añadir los puntos correspondientes
points(max_acc_ensemble, datos_alpha_s_1$accuracy_mean_dataset_mean[datos_alpha_s_1$n_ensemble == max_acc_ensemble], col = 'darkorange1', pch = 19)
points(max_signifi, datos_alpha_s_1$accuracy_mean_dataset_mean[datos_alpha_s_1$n_ensemble == max_signifi], col = 'blue', pch = 19)
}
}
# Restablecer los parámetros gráficos
par(mfrow = c(1, 1))
datos_alpha_s$n_ensemble <- as.numeric(as.character(datos_alpha_s$n_ensemble))
datos_alpha_s$accuracy_mean_dataset_mean <- as.numeric(as.character(datos_alpha_s$accuracy_mean_dataset_mean))
p <- plot_ly()
for (alpha_value in c(2, 4, 6, 8, 10)) {
for (split_value in c(1, 2, 4, 6, 8, 10, 12, 14)) {
datos_alpha_s_1 <- datos_alpha_s %>% filter(alpha == alpha_value, split == split_value)
p <- p %>%
add_lines(x = datos_alpha_s_1$n_ensemble,
y = datos_alpha_s_1$accuracy_mean_dataset_mean,
name = paste("alpha =", alpha_value, "split =", split_value),
line = list(width = 2),
hovertemplate = paste('Alpha: ', alpha_value,
' Split:', alpha_value,
'<br>N ensemble:', datos_alpha_s_1$n_ensemble,
'<br>Accuracy:', round(datos_alpha_s_1$accuracy_mean_dataset_mean,4),
'<extra></extra>'))
}
}
p <- p %>%
layout(title = 'All combinations of alpha and split',
xaxis = list(title = 'n ensembles'),
yaxis = list(title = 'accuracy mean'),
legend = list(title = list(text = 'Legend')))
p
df_ranking_order <- df_ranking  %>% arrange(desc(max_total))
df_ranking_order_sig <- df_ranking  %>% arrange(desc(max_no_signif))
df_ranking$max_total_order = rank(-df_ranking$max_total)
df_ranking$max_no_signif_order = rank(-df_ranking$max_no_signif)
knitr::kable(df_ranking %>% arrange(max_total_order))
cor.test(df_ranking$max_total_order, df_ranking$max_no_signif_order, method=c('spearman'))
cor.test(df_ranking$max_total_order, df_ranking$max_no_signif_order, method=c('pearson'))
#setwd("/home/carmen/PycharmProjects/EnsemblesComplexity/Results_general_algorithm_cycles")
# Data disaggregated per complexity measures
datos_CM <- read.csv('df_summary_CM.csv')
str(datos_CM)
# Como en python empezamos en 0, tenemos que sumar 1 a n_ensemble
datos_CM$n_ensemble <- datos_CM$n_ensemble + 1
# Convert id and time into factor variables
datos_CM <- datos_CM %>%
convert_as_factor(weights, n_cycle,n_ensemble)
datos_CM_filtro <- datos_CM %>% filter(alpha<12, split <16)
# No hace falta agregar más porque este dataset ya está agregado en origen
plot_2max_grid_with_ranking <- function(CM,df_filtered,dif_no_sig_all,datos_CM){
df_ranking_CM <- data.frame(df_filtered$valores_combo)
colnames(df_ranking_CM) <- 'valores_combo'
df_ranking_CM$valor_split <- df_filtered$valor_split
df_ranking_CM$valor_alpha <- df_filtered$valor_alpha
df_ranking_CM$max_total <- rep(NA,dim(df_ranking_CM)[1])
df_ranking_CM$max_no_signif <- rep(NA,dim(df_ranking_CM)[1])
# Configuración de la cuadrícula (5 filas y 8 columnas)
par(mfrow = c(5, 8), mar = c(2, 2, 2, 1))
max_acc_max_ensemble = 0
# Bucles para alpha y split
for (alpha_value in c(2, 4, 6, 8, 10)) {
for (split_value in c(1, 2, 4, 6, 8, 10, 12, 14)) {
# Filtrar los datos por alpha y split
datos_CM_case <- datos_CM %>% filter(weights == CM,
alpha == alpha_value, split == split_value)
datos_CM_case <- as.data.frame(datos_CM_case)
datos_CM_case$n_cycle <- as.numeric(as.character(datos_CM_case$n_cycle))
datos_CM_case$n_ensemble <- as.numeric(as.character(datos_CM_case$n_ensemble))
# Encontrar el máximo
idmax <- which.max(datos_CM_case$accuracy_mean_mean)
max_acc_ensemble <- datos_CM_case[idmax, 'n_ensemble']
# Guardamos para ranking
df_ranking_CM[(df_ranking_CM$valor_alpha == alpha_value) & (df_ranking_CM$valor_split == split_value),'max_total'] = max(datos_CM_case$accuracy_mean_mean)
# Cuántas veces el máximo accuracy se logra con el máximo número de modelos
max_acc_max_ensemble = max_acc_max_ensemble + sum(max_acc_ensemble== max(datos_CM_case[,'n_ensemble']))
max_signifi <- dif_no_sig_all[(dif_no_sig_all$valor_alpha == alpha_value) & (dif_no_sig_all$valor_split == split_value), 'max_num_models']
# Guardamos para ranking
df_ranking_CM[(df_ranking_CM$valor_alpha == alpha_value) & (df_ranking_CM$valor_split == split_value),'max_no_signif'] = max(datos_CM_case[datos_CM_case$n_ensemble <= max_signifi,'accuracy_mean_mean'])
# Graficar
plot(datos_CM_case$n_ensemble, datos_CM_case$accuracy_mean_mean, type = 'l',
xlab = 'n ensembles', ylab = 'accuracy mean', main = paste('alpha =', alpha_value, 'split =', split_value),ylim=c(0.805,0.818))
# Añadir los puntos correspondientes
points(max_acc_ensemble, datos_CM_case$accuracy_mean_mean[datos_CM_case$n_ensemble == max_acc_ensemble]+0.0003, col = 'darkorange1', pch = 19)
points(max_signifi, datos_CM_case$accuracy_mean_mean[datos_CM_case$n_ensemble == max_signifi], col = 'blue', pch = 19)
}
}
# Restablecer los parámetros gráficos
par(mfrow = c(1, 1))
return(list(df_ranking_CM = df_ranking_CM,max_acc_max_ensemble = max_acc_max_ensemble))
}
plot_all_combinations <- function(CM,datos_CM_filtro){
datos_CM_filtro$n_ensemble <- as.numeric(as.character(datos_CM_filtro$n_ensemble))
datos_CM_filtro$accuracy_mean_mean <- as.numeric(as.character(datos_CM_filtro$accuracy_mean_mean))
p <- plot_ly()
for (alpha_value in c(2, 4, 6, 8, 10)) {
for (split_value in c(1, 2, 4, 6, 8, 10, 12, 14)) {
datos_CM_case <- datos_CM_filtro %>% filter(weights == CM,
alpha == alpha_value, split == split_value)
p <- p %>%
add_lines(x = datos_CM_case$n_ensemble,
y = datos_CM_case$accuracy_mean_mean,
name = paste("alpha =", alpha_value, "split =", split_value),
line = list(width = 2),
hovertemplate = paste('Alpha: ', alpha_value,
' Split:', split_value,
'<br>N ensemble:', datos_CM_case$n_ensemble,
'<br>Accuracy:', round(datos_CM_case$accuracy_mean_mean,4),
'<extra></extra>'))
}
}
p <- p %>%
layout(title = paste(CM,': All combinations of alpha and split'),
xaxis = list(title = 'n ensembles'),
yaxis = list(title = 'accuracy mean'),
legend = list(title = list(text = 'Legend')))
p
}
plot_2max_grid_with_ranking <- function(CM,df_filtered,dif_no_sig_all,datos_CM){
df_ranking_CM <- data.frame(df_filtered$valores_combo)
colnames(df_ranking_CM) <- 'valores_combo'
df_ranking_CM$valor_split <- df_filtered$valor_split
df_ranking_CM$valor_alpha <- df_filtered$valor_alpha
df_ranking_CM$max_total <- rep(NA,dim(df_ranking_CM)[1])
df_ranking_CM$max_no_signif <- rep(NA,dim(df_ranking_CM)[1])
# Configuración de la cuadrícula (5 filas y 8 columnas)
par(mfrow = c(5, 8), mar = c(2, 2, 2, 1))
max_acc_max_ensemble = 0
# Bucles para alpha y split
for (alpha_value in c(2, 4, 6, 8, 10)) {
for (split_value in c(1, 2, 4, 6, 8, 10, 12, 14)) {
# Filtrar los datos por alpha y split
datos_CM_case <- datos_CM %>% filter(weights == CM,
alpha == alpha_value, split == split_value)
datos_CM_case <- as.data.frame(datos_CM_case)
datos_CM_case$n_cycle <- as.numeric(as.character(datos_CM_case$n_cycle))
datos_CM_case$n_ensemble <- as.numeric(as.character(datos_CM_case$n_ensemble))
# Encontrar el máximo
idmax <- which.max(datos_CM_case$accuracy_mean_mean)
max_acc_ensemble <- datos_CM_case[idmax, 'n_ensemble']
# Guardamos para ranking
df_ranking_CM[(df_ranking_CM$valor_alpha == alpha_value) & (df_ranking_CM$valor_split == split_value),'max_total'] = max(datos_CM_case$accuracy_mean_mean)
# Cuántas veces el máximo accuracy se logra con el máximo número de modelos
max_acc_max_ensemble = max_acc_max_ensemble + sum(max_acc_ensemble== max(datos_CM_case[,'n_ensemble']))
max_signifi <- dif_no_sig_all[(dif_no_sig_all$valor_alpha == alpha_value) & (dif_no_sig_all$valor_split == split_value), 'max_num_models']
# Guardamos para ranking
df_ranking_CM[(df_ranking_CM$valor_alpha == alpha_value) & (df_ranking_CM$valor_split == split_value),'max_no_signif'] = max(datos_CM_case[datos_CM_case$n_ensemble <= max_signifi,'accuracy_mean_mean'])
# Graficar
plot(datos_CM_case$n_ensemble, datos_CM_case$accuracy_mean_mean, type = 'l',
xlab = 'n ensembles', ylab = 'accuracy mean', main = paste('alpha =', alpha_value, 'split =', split_value),ylim=c(0.805,0.818))
# Añadir los puntos correspondientes
points(max_acc_ensemble, datos_CM_case$accuracy_mean_mean[datos_CM_case$n_ensemble == max_acc_ensemble]+0.0003, col = 'darkorange1', pch = 19)
points(max_signifi, datos_CM_case$accuracy_mean_mean[datos_CM_case$n_ensemble == max_signifi], col = 'blue', pch = 19)
}
}
# Restablecer los parámetros gráficos
par(mfrow = c(1, 1))
return(list(df_ranking_CM = df_ranking_CM,max_acc_max_ensemble = max_acc_max_ensemble))
}
plot_all_combinations <- function(CM,datos_CM_filtro){
datos_CM_filtro$n_ensemble <- as.numeric(as.character(datos_CM_filtro$n_ensemble))
datos_CM_filtro$accuracy_mean_mean <- as.numeric(as.character(datos_CM_filtro$accuracy_mean_mean))
p <- plot_ly()
for (alpha_value in c(2, 4, 6, 8, 10)) {
for (split_value in c(1, 2, 4, 6, 8, 10, 12, 14)) {
datos_CM_case <- datos_CM_filtro %>% filter(weights == CM,
alpha == alpha_value, split == split_value)
p <- p %>%
add_lines(x = datos_CM_case$n_ensemble,
y = datos_CM_case$accuracy_mean_mean,
name = paste("alpha =", alpha_value, "split =", split_value),
line = list(width = 2),
hovertemplate = paste('Alpha: ', alpha_value,
' Split:', split_value,
'<br>N ensemble:', datos_CM_case$n_ensemble,
'<br>Accuracy:', round(datos_CM_case$accuracy_mean_mean,4),
'<extra></extra>'))
}
}
p <- p %>%
layout(title = paste(CM,': All combinations of alpha and split'),
xaxis = list(title = 'n ensembles'),
yaxis = list(title = 'accuracy mean'),
legend = list(title = list(text = 'Legend')))
p
}
CM = 'CLD'
res = plot_2max_grid_with_ranking(CM,df_filtered,dif_no_sig_all,datos_CM)
df_ranking_CM = res$df_ranking_CM
max_acc_max_ensemble = res$max_acc_max_ensemble
plot_all_combinations(CM,datos_CM_filtro)
df_ranking_CM$max_total_order = rank(-df_ranking_CM$max_total)
df_ranking_CM$max_no_signif_order = rank(-df_ranking_CM$max_no_signif)
cor.test(df_ranking_CM$max_total_order, df_ranking_CM$max_no_signif_order, method=c('spearman'))
cor.test(df_ranking_CM$max_total_order, df_ranking_CM$max_no_signif_order, method=c('pearson'))
knitr::kable(df_ranking_CM %>% arrange(max_total_order))
CM = 'DCP'
res = plot_2max_grid_with_ranking(CM,df_filtered,dif_no_sig_all,datos_CM)
df_ranking_CM = res$df_ranking_CM
max_acc_max_ensemble = res$max_acc_max_ensemble
plot_all_combinations(CM,datos_CM_filtro)
df_ranking_CM$max_total_order = rank(-df_ranking_CM$max_total)
df_ranking_CM$max_no_signif_order = rank(-df_ranking_CM$max_no_signif)
cor.test(df_ranking_CM$max_total_order, df_ranking_CM$max_no_signif_order, method=c('spearman'))
cor.test(df_ranking_CM$max_total_order, df_ranking_CM$max_no_signif_order, method=c('pearson'))
knitr::kable(df_ranking_CM %>% arrange(max_total_order))
CM = 'F1'
res = plot_2max_grid_with_ranking(CM,df_filtered,dif_no_sig_all,datos_CM)
df_ranking_CM = res$df_ranking_CM
max_acc_max_ensemble = res$max_acc_max_ensemble
plot_all_combinations(CM,datos_CM_filtro)
df_ranking_CM$max_total_order = rank(-df_ranking_CM$max_total)
df_ranking_CM$max_no_signif_order = rank(-df_ranking_CM$max_no_signif)
cor.test(df_ranking_CM$max_total_order, df_ranking_CM$max_no_signif_order, method=c('spearman'))
cor.test(df_ranking_CM$max_total_order, df_ranking_CM$max_no_signif_order, method=c('pearson'))
knitr::kable(df_ranking_CM %>% arrange(max_total_order))
CM = 'Hostility'
res = plot_2max_grid_with_ranking(CM,df_filtered,dif_no_sig_all,datos_CM)
df_ranking_CM = res$df_ranking_CM
max_acc_max_ensemble = res$max_acc_max_ensemble
plot_all_combinations(CM,datos_CM_filtro)
df_ranking_CM$max_total_order = rank(-df_ranking_CM$max_total)
df_ranking_CM$max_no_signif_order = rank(-df_ranking_CM$max_no_signif)
cor.test(df_ranking_CM$max_total_order, df_ranking_CM$max_no_signif_order, method=c('spearman'))
cor.test(df_ranking_CM$max_total_order, df_ranking_CM$max_no_signif_order, method=c('pearson'))
knitr::kable(df_ranking_CM %>% arrange(max_total_order))
CM = 'kDN'
res = plot_2max_grid_with_ranking(CM,df_filtered,dif_no_sig_all,datos_CM)
df_ranking_CM = res$df_ranking_CM
max_acc_max_ensemble = res$max_acc_max_ensemble
plot_all_combinations(CM,datos_CM_filtro)
df_ranking_CM$max_total_order = rank(-df_ranking_CM$max_total)
df_ranking_CM$max_no_signif_order = rank(-df_ranking_CM$max_no_signif)
cor.test(df_ranking_CM$max_total_order, df_ranking_CM$max_no_signif_order, method=c('spearman'))
cor.test(df_ranking_CM$max_total_order, df_ranking_CM$max_no_signif_order, method=c('pearson'))
knitr::kable(df_ranking_CM %>% arrange(max_total_order))
CM = 'LSC'
res = plot_2max_grid_with_ranking(CM,df_filtered,dif_no_sig_all,datos_CM)
df_ranking_CM = res$df_ranking_CM
max_acc_max_ensemble = res$max_acc_max_ensemble
plot_all_combinations(CM,datos_CM_filtro)
df_ranking_CM$max_total_order = rank(-df_ranking_CM$max_total)
df_ranking_CM$max_no_signif_order = rank(-df_ranking_CM$max_no_signif)
cor.test(df_ranking_CM$max_total_order, df_ranking_CM$max_no_signif_order, method=c('spearman'))
cor.test(df_ranking_CM$max_total_order, df_ranking_CM$max_no_signif_order, method=c('pearson'))
knitr::kable(df_ranking_CM %>% arrange(max_total_order))
CM = 'N1'
res = plot_2max_grid_with_ranking(CM,df_filtered,dif_no_sig_all,datos_CM)
df_ranking_CM = res$df_ranking_CM
max_acc_max_ensemble = res$max_acc_max_ensemble
plot_all_combinations(CM,datos_CM_filtro)
df_ranking_CM$max_total_order = rank(-df_ranking_CM$max_total)
df_ranking_CM$max_no_signif_order = rank(-df_ranking_CM$max_no_signif)
cor.test(df_ranking_CM$max_total_order, df_ranking_CM$max_no_signif_order, method=c('spearman'))
cor.test(df_ranking_CM$max_total_order, df_ranking_CM$max_no_signif_order, method=c('pearson'))
knitr::kable(df_ranking_CM %>% arrange(max_total_order))
CM = 'N2'
res = plot_2max_grid_with_ranking(CM,df_filtered,dif_no_sig_all,datos_CM)
df_ranking_CM = res$df_ranking_CM
max_acc_max_ensemble = res$max_acc_max_ensemble
plot_all_combinations(CM,datos_CM_filtro)
df_ranking_CM$max_total_order = rank(-df_ranking_CM$max_total)
df_ranking_CM$max_no_signif_order = rank(-df_ranking_CM$max_no_signif)
cor.test(df_ranking_CM$max_total_order, df_ranking_CM$max_no_signif_order, method=c('spearman'))
cor.test(df_ranking_CM$max_total_order, df_ranking_CM$max_no_signif_order, method=c('pearson'))
knitr::kable(df_ranking_CM %>% arrange(max_total_order))
CM = 'TD_U'
res = plot_2max_grid_with_ranking(CM,df_filtered,dif_no_sig_all,datos_CM)
df_ranking_CM = res$df_ranking_CM
max_acc_max_ensemble = res$max_acc_max_ensemble
plot_all_combinations(CM,datos_CM_filtro)
df_ranking_CM$max_total_order = rank(-df_ranking_CM$max_total)
df_ranking_CM$max_no_signif_order = rank(-df_ranking_CM$max_no_signif)
cor.test(df_ranking_CM$max_total_order, df_ranking_CM$max_no_signif_order, method=c('spearman'))
cor.test(df_ranking_CM$max_total_order, df_ranking_CM$max_no_signif_order, method=c('pearson'))
knitr::kable(df_ranking_CM %>% arrange(max_total_order))
library(tidyverse)
library(ggpubr)
library(rstatix)
library(datarium)
getwd()
setwd("/home/carmen/PycharmProjects/EnsemblesComplexity/Results_general_algorithm_cycles")
#datos <- read.csv('TotalAggregatedResults_ParameterConfiguration_CDB.csv')
# Cargamos los datos ya agregados por medida de complejidad porque si no peta
datos <- read.csv('df_summary_data.csv')
str(datos)
# Convert id and time into factor variables
datos <- datos %>%
convert_as_factor(Dataset, combo_alpha_split, n_cycle,n_ensemble)
str(datos)
datos$split <- as.factor(datos$split)
datos_alpha_split <- datos %>% group_by(Dataset, alpha, split) %>%  # Agrupar por las demás variables
summarise(accuracy_mean_mean = mean(accuracy_mean_mean),
accuracy_median_mean = mean(accuracy_mean_median),
accuracy_std_mean = mean(accuracy_mean_std))
datos_alpha_split <- datos_alpha_split %>%
convert_as_factor(Dataset, alpha, split)
datos_alpha_split<- as.data.frame(datos_alpha_split)
str(datos_alpha_split)
# Friedman test
friedman.test(accuracy_mean_mean ~ split |Dataset,data=as.matrix(datos_alpha_split))
friedman.test(accuracy_median_mean ~ split |Dataset,data=as.matrix(datos_alpha_split))
# Friedman, no paramétrico
res.fried <- datos_alpha_split %>% friedman_test(accuracy_mean_mean ~ split |Dataset)
res.fried$p
pwc2 <- datos_alpha_split %>%
wilcox_test(accuracy_mean_mean ~ split, paired = TRUE, p.adjust.method = "bonferroni")
pwc2
View(pwc2)
pwc2_median <- datos_alpha_split %>%
wilcox_test(accuracy_median_mean ~ split, paired = TRUE, p.adjust.method = "bonferroni")
pwc2_std <- datos_alpha_split %>%
wilcox_test(accuracy_std_mean ~ split, paired = TRUE, p.adjust.method = "bonferroni")
View(pwc2_median)
View(pwc2_std)
# Friedman test
friedman.test(accuracy_mean_mean ~ alpha |Dataset,data=as.matrix(datos_alpha_split))
# Friedman, no paramétrico
res.fried <- datos_alpha_split %>% friedman_test(accuracy_mean_mean ~ alpha |Dataset)
datos_alpha_split
pwc2_media <- datos_alpha_split %>%
wilcox_test(accuracy_mean_mean ~ alpha, paired = TRUE, p.adjust.method = "bonferroni")
pwc2_median <- datos_alpha_split %>%
wilcox_test(accuracy_median_mean ~ alpha, paired = TRUE, p.adjust.method = "bonferroni")
pwc2_std <- datos_alpha_split %>%
wilcox_test(accuracy_std_mean ~ alpha, paired = TRUE, p.adjust.method = "bonferroni")
View(pwc2_media)
View(pwc2_median)
View(pwc2_std)
