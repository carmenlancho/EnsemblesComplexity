#                         lengthMenu = c(15, 30, 50, 100), # Opciones de filas por página
#                         autoWidth = TRUE))
# Convertir el dataframe al formato largo para ggplot
df_long <- tidyr::pivot_longer(table_split1, cols = c("mean", "median", "std"),
names_to = "variable", values_to = "value")
df_long$n_cycle <- as.numeric(df_long$n_cycle)
# Crear el primer gráfico (mean y median) con ajuste en los breaks del eje x
g1 <- ggplot(df_long[df_long$variable %in% c("mean", "median"),],
aes(x = n_cycle, y = value, color = variable)) +
geom_line(size = 1) +
geom_point(size = 1) +
labs(title = "Evolution mean median",
x = "n_cycle", y = "Value", color = " ") +
theme_minimal() +
scale_color_manual(values = c("mean" = "purple", "median" = "orange"))
# Crear el segundo gráfico (std) con ajuste en los breaks del eje x
g2 <- ggplot(df_long[df_long$variable == "std",],
aes(x = n_cycle, y = value, color = variable)) +
geom_line(size = 1) +
geom_point(size = 1) +
labs(title = "Evolution std",
x = "n_cycle", y = "Value", color = " ") +
theme_minimal() +
scale_color_manual(values = c("std" = "blue"))
# Colocar los dos gráficos juntos con patchwork
g1 + g2 + plot_layout(nrow = 2)
table_split2 <- datos %>% filter(split == 2) %>%
group_by(n_cycle) %>%
summarise_at(vars(accuracy_mean_mean),  list(mean = mean, median = median, std = sd))
knitr::kable(table_split2)
# Convertir el dataframe al formato largo para ggplot
df_long <- tidyr::pivot_longer(table_split2, cols = c("mean", "median", "std"),
names_to = "variable", values_to = "value")
df_long$n_cycle <- as.numeric(df_long$n_cycle)
# Crear el primer gráfico (mean y median) con ajuste en los breaks del eje x
g1 <- ggplot(df_long[df_long$variable %in% c("mean", "median"),],
aes(x = n_cycle, y = value, color = variable)) +
geom_line(size = 1) +
geom_point(size = 1) +
labs(title = "Evolution mean median",
x = "n_cycle", y = "Value", color = " ") +
theme_minimal() +
scale_color_manual(values = c("mean" = "purple", "median" = "orange"))
# Crear el segundo gráfico (std) con ajuste en los breaks del eje x
g2 <- ggplot(df_long[df_long$variable == "std",],
aes(x = n_cycle, y = value, color = variable)) +
geom_line(size = 1) +
geom_point(size = 1) +
labs(title = "Evolution std",
x = "n_cycle", y = "Value", color = " ") +
theme_minimal() +
scale_color_manual(values = c("std" = "blue"))
# Colocar los dos gráficos juntos con patchwork
g1 + g2 + plot_layout(nrow = 2)
table_split4 <- datos %>% filter(split == 4) %>%
group_by(n_cycle) %>%
summarise_at(vars(accuracy_mean_mean),  list(mean = mean, median = median, std = sd))
knitr::kable(table_split4)
# Convertir el dataframe al formato largo para ggplot
df_long <- tidyr::pivot_longer(table_split4, cols = c("mean", "median", "std"),
names_to = "variable", values_to = "value")
df_long$n_cycle <- as.numeric(df_long$n_cycle)
# Crear el primer gráfico (mean y median) con ajuste en los breaks del eje x
g1 <- ggplot(df_long[df_long$variable %in% c("mean", "median"),],
aes(x = n_cycle, y = value, color = variable)) +
geom_line(size = 1) +
geom_point(size = 1) +
labs(title = "Evolution mean median",
x = "n_cycle", y = "Value", color = " ") +
theme_minimal() +
scale_color_manual(values = c("mean" = "purple", "median" = "orange"))
# Crear el segundo gráfico (std) con ajuste en los breaks del eje x
g2 <- ggplot(df_long[df_long$variable == "std",],
aes(x = n_cycle, y = value, color = variable)) +
geom_line(size = 1) +
geom_point(size = 1) +
labs(title = "Evolution std",
x = "n_cycle", y = "Value", color = " ") +
theme_minimal() +
scale_color_manual(values = c("std" = "blue"))
# Colocar los dos gráficos juntos con patchwork
g1 + g2 + plot_layout(nrow = 2)
table_split10 <- datos %>% filter(split == 10) %>%
group_by(n_cycle) %>%
summarise_at(vars(accuracy_mean_mean),  list(mean = mean, median = median, std = sd))
knitr::kable(table_split10)
# Convertir el dataframe al formato largo para ggplot
df_long <- tidyr::pivot_longer(table_split10, cols = c("mean", "median", "std"),
names_to = "variable", values_to = "value")
df_long$n_cycle <- as.numeric(df_long$n_cycle)
# Crear el primer gráfico (mean y median) con ajuste en los breaks del eje x
g1 <- ggplot(df_long[df_long$variable %in% c("mean", "median"),],
aes(x = n_cycle, y = value, color = variable)) +
geom_line(size = 1) +
geom_point(size = 1) +
labs(title = "Evolution mean median",
x = "n_cycle", y = "Value", color = " ") +
theme_minimal() +
scale_color_manual(values = c("mean" = "purple", "median" = "orange"))
# Crear el segundo gráfico (std) con ajuste en los breaks del eje x
g2 <- ggplot(df_long[df_long$variable == "std",],
aes(x = n_cycle, y = value, color = variable)) +
geom_line(size = 1) +
geom_point(size = 1) +
labs(title = "Evolution std",
x = "n_cycle", y = "Value", color = " ") +
theme_minimal() +
scale_color_manual(values = c("std" = "blue"))
# Colocar los dos gráficos juntos con patchwork
g1 + g2 + plot_layout(nrow = 2)
# Tenemos que hacer el análisis para cada combo_alpha_split
valores_combo = levels(datos$combo_alpha_split)
n_combo = length(valores_combo)
combo_friedman = data.frame(valores_combo)
combo_friedman$p_value = rep(NA,n_combo)
for (i in valores_combo){
#print(i)
datos_i = datos[datos$combo_alpha_split==i,]
fri = friedman.test(accuracy_mean_mean ~ n_cycle |Dataset, data=as.matrix(datos_i))
combo_friedman[combo_friedman$valores_combo==i,2] = fri$p.value
}
combo_friedman[combo_friedman$p_value> 0.05]
# es decir, en todos los casos hay diferencias significativas
dif_no_sig <- data.frame(valores_combo)
dif_no_sig$niveles = rep(NA,n_combo)
# Lo dejamos en comentarios porque tarda mucho
# for (i in valores_combo){
#   print(i)
#   datos_i = datos[datos$combo_alpha_split==i,]
#   datos_i$n_cycle <- factor(datos_i$n_cycle) # los niveles del factor cambian en cada subset
#   pwc2 <- datos_i %>%
#     wilcox_test(accuracy_mean_mean ~ n_cycle, paired = TRUE, p.adjust.method = "bonferroni")
#   # Filtrar comparaciones con diferencias no significativas (suponiendo un umbral de p > 0.05)
#   no_significativas <- pwc2[pwc2$p.adj>0.1,]
#
#
#   # si no todas las comparaciones con ese nivel son no significativas, lo quitamos
#   # es decir, no nos vale que solo no haya diferencia entre 3 y 5 y con el resto (3-6,3-7,etc) sí
#   max_cycles = max(as.numeric(pwc2$group2))
#   valores_check <- unique(as.numeric(no_significativas$group1))
#   for (v in valores_check){
#     if (sum(no_significativas$group1 == v) <(max_cycles - v) ){
#       no_significativas = no_significativas[no_significativas$group1!=v,]
#     }
#   }
#
#   # Extraer los niveles de los pares con diferencias no significativas
#   niveles_no_significativos <- unique(c(no_significativas$group1, no_significativas$group2))
#
#   dif_no_sig[dif_no_sig$valores_combo==i,2] = paste(niveles_no_significativos, collapse = ", ")
# }
#write.csv(dif_no_sig, "CDB_cycles_ParametersComboAlphaSplit_dif_no_signif_cycles_mean.csv")
dif_no_sig_mean <- read.csv('CDB_cycles_ParametersComboAlphaSplit_dif_no_signif_cycles_mean.csv')
head(dif_no_sig_mean)
# Variables to character
dif_no_sig_mean$niveles <- as.character(dif_no_sig_mean$niveles)
dif_no_sig_mean$valores_combo <- as.character(dif_no_sig_mean$valores_combo)
# Order the values
dif_no_sig_mean$niveles <- sapply(strsplit(dif_no_sig_mean$niveles, ", "), function(x) {
paste(sort(as.numeric(x)), collapse = ", ")
})
# Extraer el valor numérico después de "split" en la columna B
dif_no_sig_mean$valor_split <- as.numeric(gsub(".*split", "", dif_no_sig_mean$valores_combo))
# New columns with number of models
dif_no_sig_mean$num_models <- mapply(function(a, b) {
min(as.numeric(strsplit(a, ", ")[[1]])) * (2*b +1)
}, dif_no_sig_mean$niveles, dif_no_sig_mean$valor_split)
# New columns with number of models (for the second value)
dif_no_sig_mean$num_models2 <- mapply(function(a, b) {
valores <- sort(as.numeric(strsplit(a, ", ")[[1]]))
segundo_min <- ifelse(length(valores) > 1, valores[2], valores[1])  # Obtener el segundo mínimo o el primero si hay solo uno
segundo_min * (2*b +1)
}, dif_no_sig_mean$niveles, dif_no_sig_mean$valor_split)
head(dif_no_sig_mean)
# dif_no_sig_mean$niveles_mediana = rep(NA,n_combo)
#
# # Lo dejamos en comentarios porque tarda mucho
#
# for (i in valores_combo){
#   print(i)
#   datos_i = datos[datos$combo_alpha_split==i,]
#   datos_i$n_cycle <- factor(datos_i$n_cycle) # los niveles del factor cambian en cada subset
#   pwc2 <- datos_i %>%
#     wilcox_test(accuracy_mean_median ~ n_cycle, paired = TRUE, p.adjust.method = "bonferroni")
#   # Filtrar comparaciones con diferencias no significativas (suponiendo un umbral de p > 0.05)
#   no_significativas <- pwc2[pwc2$p.adj>0.1,]
#
#
#   # si no todas las comparaciones con ese nivel son no significativas, lo quitamos
#   # es decir, no nos vale que solo no haya diferencia entre 3 y 5 y con el resto (3-6,3-7,etc) sí
#   max_cycles = max(as.numeric(pwc2$group2))
#   valores_check <- unique(as.numeric(no_significativas$group1))
#   for (v in valores_check){
#     if (sum(no_significativas$group1 == v) <(max_cycles - v) ){
#       no_significativas = no_significativas[no_significativas$group1!=v,]
#     }
#   }
#
#   # Extraer los niveles de los pares con diferencias no significativas
#   niveles_no_significativos <- unique(c(no_significativas$group1, no_significativas$group2))
#
#   dif_no_sig_mean[dif_no_sig_mean$valores_combo==i,'niveles_mediana'] = paste(niveles_no_significativos, collapse = ", ")
# }
#write.csv(dif_no_sig_mean, "CDB_cycles_ParametersComboAlphaSplit_dif_no_signif_cycles_mean_median.csv")
# dif_no_sig_mean$niveles_std = rep(NA,n_combo)
#
# # Lo dejamos en comentarios porque tarda mucho
#
# for (i in valores_combo){
#   print(i)
#   datos_i = datos[datos$combo_alpha_split==i,]
#   datos_i$n_cycle <- factor(datos_i$n_cycle) # los niveles del factor cambian en cada subset
#   pwc2 <- datos_i %>%
#     wilcox_test(accuracy_mean_std ~ n_cycle, paired = TRUE, p.adjust.method = "bonferroni")
#   # Filtrar comparaciones con diferencias no significativas (suponiendo un umbral de p > 0.05)
#   no_significativas <- pwc2[pwc2$p.adj>0.1,]
#
#
#   # si no todas las comparaciones con ese nivel son no significativas, lo quitamos
#   # es decir, no nos vale que solo no haya diferencia entre 3 y 5 y con el resto (3-6,3-7,etc) sí
#   max_cycles = max(as.numeric(pwc2$group2))
#   valores_check <- unique(as.numeric(no_significativas$group1))
#   for (v in valores_check){
#     if (sum(no_significativas$group1 == v) <(max_cycles - v) ){
#       no_significativas = no_significativas[no_significativas$group1!=v,]
#     }
#   }
#
#   # Extraer los niveles de los pares con diferencias no significativas
#   niveles_no_significativos <- unique(c(no_significativas$group1, no_significativas$group2))
#
#   dif_no_sig_mean[dif_no_sig_mean$valores_combo==i,'niveles_std'] = paste(niveles_no_significativos, collapse = ", ")
# }
#write.csv(dif_no_sig_mean, "CDB_cycles_ParametersComboAlphaSplit_dif_no_signif_cycles_mean_median_std.csv")
dif_no_sig_all <- read.csv('CDB_cycles_ParametersComboAlphaSplit_dif_no_signif_cycles_mean_median_std.csv')
head(dif_no_sig_all)
# Variables to character
dif_no_sig_all$niveles_mediana <- as.character(dif_no_sig_all$niveles_mediana)
dif_no_sig_all$niveles_std <- as.character(dif_no_sig_all$niveles_std)
dif_no_sig_all$valores_combo <- as.character(dif_no_sig_all$valores_combo)
# Order the values
dif_no_sig_all$niveles_mediana <- sapply(strsplit(dif_no_sig_all$niveles_mediana, ", "), function(x) {
paste(sort(as.numeric(x)), collapse = ", ")
})
dif_no_sig_all$niveles_std <- sapply(strsplit(dif_no_sig_all$niveles_std, ", "), function(x) {
paste(sort(as.numeric(x)), collapse = ", ")
})
# New columns with number of models
dif_no_sig_all$num_models_mediana <- mapply(function(a, b) {
min(as.numeric(strsplit(a, ", ")[[1]])) * (2*b +1)
}, dif_no_sig_all$niveles_mediana, dif_no_sig_all$valor_split)
dif_no_sig_all$num_models_std <- mapply(function(a, b) {
min(as.numeric(strsplit(a, ", ")[[1]])) * (2*b +1)
}, dif_no_sig_all$niveles_std, dif_no_sig_all$valor_split)
# New columns with number of models (for the second value)
dif_no_sig_all$num_models2_mediana <- mapply(function(a, b) {
valores <- sort(as.numeric(strsplit(a, ", ")[[1]]))
segundo_min <- ifelse(length(valores) > 1, valores[2], valores[1])  # Obtener el segundo mínimo o el primero si hay solo uno
segundo_min * (2*b +1)
}, dif_no_sig_all$niveles_mediana, dif_no_sig_all$valor_split)
dif_no_sig_all$num_models2_std <- mapply(function(a, b) {
valores <- sort(as.numeric(strsplit(a, ", ")[[1]]))
segundo_min <- ifelse(length(valores) > 1, valores[2], valores[1])  # Obtener el segundo mínimo o el primero si hay solo uno
segundo_min * (2*b +1)
}, dif_no_sig_all$niveles_std, dif_no_sig_all$valor_split)
# Sacamos tb el valor en ciclos
dif_no_sig_all$cycles_mean <- sapply(strsplit(dif_no_sig_all$niveles, ", "), function(x) {
min(as.numeric(x))})
dif_no_sig_all$cycles_median <- sapply(strsplit(dif_no_sig_all$niveles_mediana, ", "), function(x) {
min(as.numeric(x))})
dif_no_sig_all$cycles_std <- sapply(strsplit(dif_no_sig_all$niveles_std, ", "), function(x) {
min(as.numeric(x))})
head(dif_no_sig_all)
#write.csv(dif_no_sig_all, "CDB_cycles_ParametersComboAlphaSplit_dif_no_signif_cycles_mean_median_std_num_models.csv")
dif_no_sig_all$max_num_cycles <- apply(X=dif_no_sig_all[,c('cycles_mean','cycles_median','cycles_std')], MARGIN=1, FUN=max)
dif_no_sig_all$max_num_models <- apply(X=dif_no_sig_all[,c('num_models','num_models_mediana','num_models_std')], MARGIN=1, FUN=max)
#write.csv(dif_no_sig_all, "CDB_cycles_ParametersComboAlphaSplit_dif_no_signif_cycles_mean_median_std_num_models.csv")
p<-ggplot(dif_no_sig_all, aes(x=max_num_models)) +
geom_histogram(color="black", fill="white")
p
summary(dif_no_sig_all$max_num_models)
dif_no_sig_all$valor_alpha <- as.numeric(gsub("alpha([0-9]+)-split[0-9]+", "\\1", dif_no_sig_all$valores_combo))
# Filtrar el dataset para eliminar las filas donde alpha > 12 y split > 16
df_filtered <- dif_no_sig_all[(dif_no_sig_all$valor_alpha < 12 & dif_no_sig_all$valor_split < 16), ]
summary(df_filtered$max_num_models)
datos_alpha_s <- datos %>% filter(alpha<12, split <16)
datos_alpha_s <- datos_alpha_s %>% group_by(alpha, split, n_cycle, n_ensemble) %>%
summarise_at(vars(accuracy_mean_mean),  list(accuracy_mean_dataset_mean = mean, accuracy_mean_dataset_median = median, accuracy_mean_dataset_std = sd))
datos_alpha_s_1 <- datos_alpha_s %>% filter(alpha==2, split==1)
datos_alpha_s_1 <- as.data.frame(datos_alpha_s_1)
datos_alpha_s_1$n_cycle <- as.numeric(as.character(datos_alpha_s_1$n_cycle))
datos_alpha_s_1$n_ensemble <- as.numeric(as.character(datos_alpha_s_1$n_ensemble))
idmax = which.max(datos_alpha_s_1$accuracy_mean_dataset_mean)
# max(datos_alpha_s_1$accuracy_mean_dataset_mean)
max_acc_ensemble = datos_alpha_s_1[idmax,'n_ensemble']
max_signifi = dif_no_sig_all[(dif_no_sig_all$valor_alpha == 2) & (dif_no_sig_all$valor_split == 1),'max_num_models']
# datos_alpha_s_1[datos_alpha_s_1$n_ensemble==max_signifi,'accuracy_mean_dataset_mean']
plot(datos_alpha_s_1$n_ensemble, datos_alpha_s_1$accuracy_mean_dataset_mean, type='l', xlab='n ensembles', ylab = 'accuracy mean', main ='alpha = 2, split =1')
points(max_acc_ensemble, datos_alpha_s_1$accuracy_mean_dataset_mean[datos_alpha_s_1$n_ensemble == max_acc_ensemble], col='darkorange1', pch=19)
points(max_signifi, datos_alpha_s_1$accuracy_mean_dataset_mean[datos_alpha_s_1$n_ensemble == max_signifi], col='blue', pch=19)
# El máximo en cada caso es
print(paste('Accuracy blue dot:', round(datos_alpha_s_1[datos_alpha_s_1$n_ensemble==max_signifi,'accuracy_mean_dataset_mean'],4)))
print(paste('Accuracy orange dot:', round(max(datos_alpha_s_1$accuracy_mean_dataset_mean),4)))
df_ranking <- data.frame(df_filtered$valores_combo)
colnames(df_ranking) <- 'valores_combo'
df_ranking$valor_split <- df_filtered$valor_split
df_ranking$valor_alpha <- df_filtered$valor_alpha
df_ranking$max_total <- rep(NA,dim(df_ranking)[1])
df_ranking$max_no_signif <- rep(NA,dim(df_ranking)[1])
# Configuración de la cuadrícula (5 filas y 8 columnas)
par(mfrow = c(5, 8), mar = c(2, 2, 2, 1))
max_acc_max_ensemble = 0
# Bucles para alpha y split
for (alpha_value in c(2, 4, 6, 8, 10)) {
for (split_value in c(1, 2, 4, 6, 8, 10, 12, 14)) {
# Filtrar los datos por alpha y split
datos_alpha_s_1 <- datos_alpha_s %>% filter(alpha == alpha_value, split == split_value)
datos_alpha_s_1 <- as.data.frame(datos_alpha_s_1)
datos_alpha_s_1$n_cycle <- as.numeric(as.character(datos_alpha_s_1$n_cycle))
datos_alpha_s_1$n_ensemble <- as.numeric(as.character(datos_alpha_s_1$n_ensemble))
# Encontrar el máximo
idmax <- which.max(datos_alpha_s_1$accuracy_mean_dataset_mean)
max_acc_ensemble <- datos_alpha_s_1[idmax, 'n_ensemble']
# Guardamos para ranking
df_ranking[(df_ranking$valor_alpha == alpha_value) & (df_ranking$valor_split == split_value),'max_total'] = max(datos_alpha_s_1$accuracy_mean_dataset_mean)
# Cuántas veces el máximo accuracy se logra con el máximo número de modelos
max_acc_max_ensemble = max_acc_max_ensemble + sum(max_acc_ensemble== max(datos_alpha_s_1[,'n_ensemble']))
max_signifi <- dif_no_sig_all[(dif_no_sig_all$valor_alpha == alpha_value) & (dif_no_sig_all$valor_split == split_value), 'max_num_models']
# Guardamos para ranking
df_ranking[(df_ranking$valor_alpha == alpha_value) & (df_ranking$valor_split == split_value),'max_no_signif'] = max(datos_alpha_s_1[datos_alpha_s_1$n_ensemble <= max_signifi,'accuracy_mean_dataset_mean'])
# Graficar
plot(datos_alpha_s_1$n_ensemble, datos_alpha_s_1$accuracy_mean_dataset_mean, type = 'l',
xlab = 'n ensembles', ylab = 'accuracy mean', main = paste('alpha =', alpha_value, 'split =', split_value))
# Añadir los puntos correspondientes
points(max_acc_ensemble, datos_alpha_s_1$accuracy_mean_dataset_mean[datos_alpha_s_1$n_ensemble == max_acc_ensemble], col = 'darkorange1', pch = 19)
points(max_signifi, datos_alpha_s_1$accuracy_mean_dataset_mean[datos_alpha_s_1$n_ensemble == max_signifi], col = 'blue', pch = 19)
}
}
# Restablecer los parámetros gráficos
par(mfrow = c(1, 1))
# Configuración de la cuadrícula (5 filas y 8 columnas)
par(mfrow = c(5, 8), mar = c(2, 2, 2, 1))
# Bucles para alpha y split
for (alpha_value in c(2, 4, 6, 8, 10)) {
for (split_value in c(1, 2, 4, 6, 8, 10, 12, 14)) {
# Filtrar los datos por alpha y split
datos_alpha_s_1 <- datos_alpha_s %>% filter(alpha == alpha_value, split == split_value)
datos_alpha_s_1 <- as.data.frame(datos_alpha_s_1)
datos_alpha_s_1$n_cycle <- as.numeric(as.character(datos_alpha_s_1$n_cycle))
datos_alpha_s_1$n_ensemble <- as.numeric(as.character(datos_alpha_s_1$n_ensemble))
# Encontrar el máximo
idmax <- which.max(datos_alpha_s_1$accuracy_mean_dataset_mean)
max_acc_ensemble <- datos_alpha_s_1[idmax, 'n_ensemble']
max_signifi <- dif_no_sig_all[(dif_no_sig_all$valor_alpha == alpha_value) & (dif_no_sig_all$valor_split == split_value), 'max_num_models']
# Graficar
plot(datos_alpha_s_1$n_ensemble, datos_alpha_s_1$accuracy_mean_dataset_mean, type = 'l',
xlab = 'n ensembles', ylab = 'accuracy mean', main = paste('alpha =', alpha_value, 'split =', split_value),ylim=c(0.810,0.8153))
# Añadir los puntos correspondientes
points(max_acc_ensemble, datos_alpha_s_1$accuracy_mean_dataset_mean[datos_alpha_s_1$n_ensemble == max_acc_ensemble], col = 'darkorange1', pch = 19)
points(max_signifi, datos_alpha_s_1$accuracy_mean_dataset_mean[datos_alpha_s_1$n_ensemble == max_signifi], col = 'blue', pch = 19)
}
}
# Restablecer los parámetros gráficos
par(mfrow = c(1, 1))
datos_alpha_s$n_ensemble <- as.numeric(as.character(datos_alpha_s$n_ensemble))
datos_alpha_s$accuracy_mean_dataset_mean <- as.numeric(as.character(datos_alpha_s$accuracy_mean_dataset_mean))
p <- plot_ly()
for (alpha_value in c(2, 4, 6, 8, 10)) {
for (split_value in c(1, 2, 4, 6, 8, 10, 12, 14)) {
datos_alpha_s_1 <- datos_alpha_s %>% filter(alpha == alpha_value, split == split_value)
p <- p %>%
add_lines(x = datos_alpha_s_1$n_ensemble,
y = datos_alpha_s_1$accuracy_mean_dataset_mean,
name = paste("alpha =", alpha_value, "split =", split_value),
line = list(width = 2),
hovertemplate = paste('Alpha: ', alpha_value,
' Split:', alpha_value,
'<br>N ensemble:', datos_alpha_s_1$n_ensemble,
'<br>Accuracy:', round(datos_alpha_s_1$accuracy_mean_dataset_mean,4),
'<extra></extra>'))
}
}
p <- p %>%
layout(title = 'All combinations of alpha and split',
xaxis = list(title = 'n ensembles'),
yaxis = list(title = 'accuracy mean'),
legend = list(title = list(text = 'Legend')))
p
df_ranking_order <- df_ranking  %>% arrange(desc(max_total))
df_ranking_order_sig <- df_ranking  %>% arrange(desc(max_no_signif))
df_ranking$max_total_order = rank(-df_ranking$max_total)
df_ranking$max_no_signif_order = rank(-df_ranking$max_no_signif)
knitr::kable(df_ranking %>% arrange(max_total_order))
cor.test(df_ranking$max_total_order, df_ranking$max_no_signif_order, method=c('spearman'))
cor.test(df_ranking$max_total_order, df_ranking$max_no_signif_order, method=c('pearson'))
#setwd("/home/carmen/PycharmProjects/EnsemblesComplexity/Results_general_algorithm_cycles")
# Data disaggregated per complexity measures
datos_CM <- read.csv('df_summary_CM.csv')
str(datos_CM)
# Como en python empezamos en 0, tenemos que sumar 1 a n_ensemble
datos_CM$n_ensemble <- datos_CM$n_ensemble + 1
# Convert id and time into factor variables
datos_CM <- datos_CM %>%
convert_as_factor(weights, n_cycle,n_ensemble)
datos_CM_filtro <- datos_CM %>% filter(alpha<12, split <16)
# No hace falta agregar más porque este dataset ya está agregado en origen
plot_2max_grid_with_ranking <- function(CM,df_filtered,dif_no_sig_all,datos_CM){
df_ranking_CM <- data.frame(df_filtered$valores_combo)
colnames(df_ranking_CM) <- 'valores_combo'
df_ranking_CM$valor_split <- df_filtered$valor_split
df_ranking_CM$valor_alpha <- df_filtered$valor_alpha
df_ranking_CM$max_total <- rep(NA,dim(df_ranking_CM)[1])
df_ranking_CM$max_no_signif <- rep(NA,dim(df_ranking_CM)[1])
# Configuración de la cuadrícula (5 filas y 8 columnas)
par(mfrow = c(5, 8), mar = c(2, 2, 2, 1))
max_acc_max_ensemble = 0
# Bucles para alpha y split
for (alpha_value in c(2, 4, 6, 8, 10)) {
for (split_value in c(1, 2, 4, 6, 8, 10, 12, 14)) {
# Filtrar los datos por alpha y split
datos_CM_case <- datos_CM %>% filter(weights == CM,
alpha == alpha_value, split == split_value)
datos_CM_case <- as.data.frame(datos_CM_case)
datos_CM_case$n_cycle <- as.numeric(as.character(datos_CM_case$n_cycle))
datos_CM_case$n_ensemble <- as.numeric(as.character(datos_CM_case$n_ensemble))
# Encontrar el máximo
idmax <- which.max(datos_CM_case$accuracy_mean_mean)
max_acc_ensemble <- datos_CM_case[idmax, 'n_ensemble']
# Guardamos para ranking
df_ranking_CM[(df_ranking_CM$valor_alpha == alpha_value) & (df_ranking_CM$valor_split == split_value),'max_total'] = max(datos_CM_case$accuracy_mean_mean)
# Cuántas veces el máximo accuracy se logra con el máximo número de modelos
max_acc_max_ensemble = max_acc_max_ensemble + sum(max_acc_ensemble== max(datos_alpha_s_1[,'n_ensemble']))
max_signifi <- dif_no_sig_all[(dif_no_sig_all$valor_alpha == alpha_value) & (dif_no_sig_all$valor_split == split_value), 'max_num_models']
# Guardamos para ranking
df_ranking_CM[(df_ranking_CM$valor_alpha == alpha_value) & (df_ranking_CM$valor_split == split_value),'max_no_signif'] = max(datos_CM_case[datos_CM_case$n_ensemble <= max_signifi,'accuracy_mean_mean'])
# Graficar
plot(datos_CM_case$n_ensemble, datos_CM_case$accuracy_mean_mean, type = 'l',
xlab = 'n ensembles', ylab = 'accuracy mean', main = paste('alpha =', alpha_value, 'split =', split_value),ylim=c(0.805,0.818))
# Añadir los puntos correspondientes
points(max_acc_ensemble, datos_CM_case$accuracy_mean_mean[datos_CM_case$n_ensemble == max_acc_ensemble]+0.0003, col = 'darkorange1', pch = 19)
points(max_signifi, datos_CM_case$accuracy_mean_mean[datos_CM_case$n_ensemble == max_signifi], col = 'blue', pch = 19)
}
}
# Restablecer los parámetros gráficos
par(mfrow = c(1, 1))
return(list(df_ranking_CM = df_ranking_CM,max_acc_max_ensemble = max_acc_max_ensemble))
}
plot_all_combinations <- function(CM,datos_CM_filtro){
datos_CM_filtro$n_ensemble <- as.numeric(as.character(datos_CM_filtro$n_ensemble))
datos_CM_filtro$accuracy_mean_mean <- as.numeric(as.character(datos_CM_filtro$accuracy_mean_mean))
p <- plot_ly()
for (alpha_value in c(2, 4, 6, 8, 10)) {
for (split_value in c(1, 2, 4, 6, 8, 10, 12, 14)) {
datos_CM_case <- datos_CM_filtro %>% filter(weights == CM,
alpha == alpha_value, split == split_value)
p <- p %>%
add_lines(x = datos_CM_case$n_ensemble,
y = datos_CM_case$accuracy_mean_mean,
name = paste("alpha =", alpha_value, "split =", split_value),
line = list(width = 2),
hovertemplate = paste('Alpha: ', alpha_value,
' Split:', split_value,
'<br>N ensemble:', datos_CM_case$n_ensemble,
'<br>Accuracy:', round(datos_CM_case$accuracy_mean_mean,4),
'<extra></extra>'))
}
}
p <- p %>%
layout(title = paste(CM,': All combinations of alpha and split'),
xaxis = list(title = 'n ensembles'),
yaxis = list(title = 'accuracy mean'),
legend = list(title = list(text = 'Legend')))
p
}
CM = 'CLD'
res = plot_2max_grid_with_ranking(CM,df_filtered,dif_no_sig_all,datos_CM)
df_ranking_CM = res$df_ranking_CM
max_acc_max_ensemble = res$max_acc_max_ensemble
plot_all_combinations(CM,datos_CM_filtro)
df_ranking_CM$max_total_order = rank(-df_ranking_CM$max_total)
df_ranking_CM$max_no_signif_order = rank(-df_ranking_CM$max_no_signif)
cor.test(df_ranking_CM$max_total_order, df_ranking_CM$max_no_signif_order, method=c('spearman'))
cor.test(df_ranking_CM$max_total_order, df_ranking_CM$max_no_signif_order, method=c('pearson'))
knitr::kable(df_ranking_CM %>% arrange(max_total_order))
CM = 'DCP'
df_ranking_CM = plot_2max_grid_with_ranking(CM,df_filtered,dif_no_sig_all,datos_CM)
plot_all_combinations(CM,datos_CM_filtro)
df_ranking_CM$max_total_order = rank(-df_ranking_CM$max_total)
CM = 'DCP'
res = plot_2max_grid_with_ranking(CM,df_filtered,dif_no_sig_all,datos_CM)
df_ranking_CM = res$df_ranking_CM
max_acc_max_ensemble = res$max_acc_max_ensemble
df_ranking_CM$max_total_order = rank(-df_ranking_CM$max_total)
df_ranking_CM$max_no_signif_order = rank(-df_ranking_CM$max_no_signif)
cor.test(df_ranking_CM$max_total_order, df_ranking_CM$max_no_signif_order, method=c('spearman'))
cor.test(df_ranking_CM$max_total_order, df_ranking_CM$max_no_signif_order, method=c('pearson'))
CM = 'N2'
res = plot_2max_grid_with_ranking(CM,df_filtered,dif_no_sig_all,datos_CM)
df_ranking_CM = res$df_ranking_CM
max_acc_max_ensemble = res$max_acc_max_ensemble
CM
res
View(df_ranking_CM)
df_ranking_CM <- data.frame(df_filtered$valores_combo)
colnames(df_ranking_CM) <- 'valores_combo'
df_ranking_CM$valor_split <- df_filtered$valor_split
df_ranking_CM$valor_alpha <- df_filtered$valor_alpha
df_ranking_CM$max_total <- rep(NA,dim(df_ranking_CM)[1])
df_ranking_CM$max_no_signif <- rep(NA,dim(df_ranking_CM)[1])
max_acc_max_ensemble = 0
datos_CM_case
mean(c(4,10,11,4,9,3,7,5,6))
